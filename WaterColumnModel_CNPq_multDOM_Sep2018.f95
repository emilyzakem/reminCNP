!11/28/18 SYNTHESIS: my favorite things:
!alpha=1, mortf=0.5
!nh4 uptake by B without y (can include total DIN uptake later, bc need NO3 penalty)
!no P excr (do w/ exp later)
!st dev of DOM = 1.5
!no DIC dep of PP growth (didn't change sol but DIC <<0)
!start with realistic nut concs: NO3 at 40, PO4 at just over 2.5, DOM at 40 uM C total  

!9/22/18: add in multiple pools following Distr_POCandB/Distr_Exp/distr10_kd

!see /Users/ezakem/Documents/THEME/ScalingUp/code/Theoretical/UptakeParameters.m for Litchman constants, etc.
!9/12/18: from aug_wP_lightlimNPup_QmaxNP_highVmaxC

!but fixing up parameters so that N uptake is from Litchman for B and P. leave nitrifiers alone for now with the old parameters (i.e., very high affinity). 

!8/23/18: add pp to quota model (eventually, add AOO, too!!)
!pp quota from: nitrify3P_amminh2_withPf_PARAMS_3graz_noinhib_Quota

!headers:
!DAYINT
!SSFILES
!INITIAL CONDITIONS
!START LOOP
!SUMS
!INTEGRATE
!RECORD DAYINT
!END LOOP
!BEGIN RK BIO
!HET BACT
!NITRIFIERS
!PHYTOPLANKTON
!GRAZING
!EQUATIONS: NUTRIENTS
!EQUATIONS: POPULATIONS
!EQUATIONS: ORGANIC MATTER
!EQUATION:OXYGEN
!TIMESTEP

!debug: check loss via grazing for the other quotas.

!5/4/18: add C and P!

!from Homeo2_addN

!24/7/18: starting to work with Homeostatis model with deep fluxes

!3/13/18: cleaned up a few more comments
!7/9/17: This code was generated by Emily Zakem and submitted as supporting information for the article "Ecological control of nitrite in the upper ocean."
!Note: As written, this model has options for 3 different P types and 3 zooplankton types, though only 1 for each is switched on: "p3" and "zoo3." It also has a placeholder in for another bacterial type ("bo_pa") though it is excluded in the equations

PROGRAM EZM

IMPLICIT NONE

INTEGER,PARAMETER :: ndays=3e6, &
    ndistr=25, & !check text file input, else this will not put all in
	Hp=2000, & !change this scale below too
	dz=5, &  
	nz=Hp/dz
REAL*8,PARAMETER :: dt=0.02D0, & 
	!ndays=10D0, & !for fractions of days
	H=2D3, & 
	!
	!PHYSICAL params:
	euz=25D0, & !m euphotic zone (absorption by water molecules) 
	mlz=20D0, & !was 50 for SCS m mixed layer depth 
	o2sat=0.2121D0, & !mol/m3 from calc_oxsat(25+273,35) in matlab. WOCE clim-avg surf T at 10S, E. Pac.
	Kgast=3D-5, & !m/s
	!deep oxygen relaxation
	o2satdeep=0.2D0, & !mol/m3, avg (for ~7 C) and 35
	t_o2relax=1D-2, & !1/day 
	kappazmin=5D-5, & !m2/s 
	kappazmax=1D-2, & !m2/s 
	Ws=10D0, & !m/day (range is 1-100) 
    Ws2=0D0, & !for second org pool called "dom". Is like DOM if Ws2=0. m/day (range is 1-100) 
    !
	!BACTERIA METABOLISMS: 
	!
	!Bo: Aerobic Heterotroph
	yd_bo=0.2D0, & !mol cells/mol Detritus - aerobic bacteria yield
	yo_bo=yd_bo/20D0*4D0/(1D0-yd_bo), & !mol cells/mol O2 -where cells have 1mol N 
	!onemy_bo=(1D0/yd_bo-1D0), & !before: enh4_bo
	pd_max= 1D0, & !1/day - normalized max detritus uptake to match nitrate max uptake
	kdn= 0.1D-3, & !org matter uptake half sat; used to be 5
	po_coef=2329100D0, & !m3/mol/day -
	!pnh4_max = , &
    !knh4_bhet = , &
    Rb_CN = 5D0, &
    Rb_PN = 1D0/16D0, &
    Qminn = 2D-16, & !mol N/cell -- 0.2 fmol N/cell (for 0.5 diam cell size, Litchman)
    Qminc = Qminn*Rb_CN, &
    Qminp = Qminn*Rb_PN, &
    Qmaxn = Qminn*3D0, & !using constants from Ward 2012 gathered
    Qmaxc = Qminc*3D0, &
    Qmaxp = Qminp*3D0, &
    prB = 0.5D0, &
    prP = 0D0, &
    alphaI = 1D0/0.5D0, & !Inverse of the 10% efficiency of POM consumption -- the rest into DOM
    !
	!linear uptake of DIN for all microbes
    !plinDIN= 0.5D0/1D-6, & !mol DIN/m3 
    !plinDIP= 0.5D0/1D-6/Rb_PN, & !mol DIN/m3 
    !
    !Litchman uptake of N for B and P (not nitrif for now)
    pn_maxL = 8.8D0, &!mol DIN/mol biomass N/day (VmaxN/QminN for diam = 0.5 Litchman)
    knL_nox = 0.081D-3, &!mol NOx/m3 (Kn Litchman)
    knL_nh4 = 0.041D-3, &!as in Ward, knL_nox/2
    !add phosphate and C params proportionally:
    pp_maxL = pn_maxL*Rb_PN, & !a guess...
    pc_maxL = pn_maxL*Rb_CN, & !a guess...
    kpL = knL_nh4*Rb_PN, & !
    kcL = knL_nh4*Rb_CN, & !
    !
	!Bnh4: Ammonia oxidizer
    ynh4_bnh4=1D0/112D0, &
    yo_bnh4=1D0/162D0, &
    eno2_bnh4=(1D0/ynh4_bnh4-1D0), & 
    pn_max= 50.8D0, & !mol DIN/mol biomass N/day
	kn= 0.133D-3, & !mol DIN/m3 
	!
	!Bno2: Nitrite oxidizer
    yno2_bno2=1D0/334D0, &
    yo_bno2=1D0/162D0, &
	eno3_bno2=(1D0/yno2_bno2-1D0), & 
	!pn_max_noo= pn_max, & !/2.1544D0, & !for 10x larger volume 
	!kn_noo= kn, & !*2.1544D0, & 
	!
	!P: phytoplankton
	Iinmax=1400D0, & !W/m2 
    !prochl:
    umaxp3=2D0, & !1/d -Ward 2014: 1*V^-0.15 for d=0.6 for Pro. max growth rate for p at 20C
    !umaxp3=2D0, & !1/d -Ward 2014: 1*V^-0.15 for d=0.6 for Pro. max growth rate for p at 20C
	!knh4_effp3= 0.0018D-3, & !mol/m3 Litchman scaling, with aV^b with a for knh4 from Ward 2014 
	!knox_effp3= 0.0036D-3, & !mol/m3 Litchman
    !Diatom: but p2 is NOT used -- ONLY p3 here 
    umaxp2=2D0, & !3D0, & 
    !knh4_effp2= 0.164D-3, & !mol/m3 Litchman scaling, with aV^b with a for knh4 from Ward 2014 
    !knox_effp2= 0.327D-3, &
    !knox= kn*2D0, &
    !
    amminhib=4.6*1e3*1D0, & !m3/mol NH4 (from 1/uM nh4 in follows 2007)
    chl2cmax=0.2D0, & !mg Chl/mmol C from Dutk 2015 
    chl2cmin=0.02D0, & !min Chl/mmol C 
    phimax=40D0, & !mmol C/mol photons/Ein  -quantum yield (mol C/mol photons)
    !a_chl=0.02D0, & !m2/mg chl a -absorption parameter by chlorophyll 
    a_chlp2=0.01D0, & !diatom
    a_chlp3=0.04D0, & !ll pro m2/mg chl a -absorption parameter (in paper as m2/mg chla) avg over all wavelengths 
    a_chlD=0.04D3, & !m2/g chl a -for light attenutation: chlorophyll plus CDOM
	convI=2.77D18/6.02D23*86400D0, & !from W/m2 to Ein/m2/d 2.77e18[quanta/W/s]*1/6.02e23[Einstein/quanta]. from MBARI: http://www3.mbari.org/bog/nopp/par.html
    Rp_CN = Rb_CN, &
    Rp_PN = Rb_PN, &
    !add old kI lim:
    kI = 10D0, &
    !and for now, use Qminn for all!
    !
    !Zooplankton:
    !gmax=2D0, & !1/d
    gmax=0D0, & !1/d
    kg=1D-3, & !mol/m3
    gam=0.5D0, & !growth yield for zoo 
    Rz_CN = Rb_CN, & !5D0, &
    Rz_PN = Rb_PN, & !1D0/16D0, &
    !
	!GRAZINGandMORTALITy:
	!mlin=3D-2, & !linear mortality for b and p
	!mlinA=9D-2, & !linear mortality for aoo
	!calc mlin based on 1. AOO is about 0.1, and 2. same % of umax for all
    fmlin = 0D0, & 
    mlinA=pn_max*ynh4_bnh4*fmlin, &
    mlinN=pn_max*yno2_bno2*fmlin, &
    mlinB=pd_max*yd_bo*fmlin, & !mlinBall below
    !since Bhet CAN have higher effective eff:
    !mlinB=pd_max*fmlin, &
    mlinp2=umaxp2*fmlin, &
    mlinp3=umaxp3*fmlin, &
    !mlinA= 0.01D0, &
    !mlinN= 0.01D0, & 
    !mlinB= 0.01D0, &
    !mlinp2=0.01D0, &
    !mlinp3=0.01D0, &
    mquad=1D3, & !quadratic mortality for b and p
    !!mquadX=0.1D3*Qminn, & !quadratic mortality for b and p
    !mquadX=1D-10, & !0.1D3*Qminn, & !quadratic mortality for b and p
    !mquadX=0D0, & !quadratic mortality for b and p
	mz=0.7D3, & !quadratic mortality for Z
    mortf=0D0, &!fraction of mort to DOM vs POM
    !maintf=0.5D0, &!fraction of loss to maintenance (respired to inorganics) vs mortality (to DOM/POM)
    !
	!Oxygen ratio for pp production and zoo consumption:
    RredO=467D0/4D0/16D0, &
    !Temperature:
    TempAeArr = -4D3, &
    TemprefArr = 293.15D0, &    
    Tkel = 273.15D0, &
    TempCoeffArr = 0.8D0

INTEGER :: t,mlboxes,j,i,jc,nt,startSS,startSSmult,ind, &
           recordDaily,dailycycle,prevendday
REAL*8 :: zm(nz) = (/(j,j=0+dz/2,Hp-dz/2, dz)/)
REAL*8 :: z(nz+1) = (/(j,j=0,Hp, dz)/)
REAL*8 :: koverh, distn, adv, diff, cputime,dayint,dayint2,Iin,twop,tot
REAL*8,DIMENSION(:),ALLOCATABLE :: time, tots
REAL*8,DIMENSION(:,:),ALLOCATABLE :: sumall
REAL*8,DIMENSION(nz+1) :: w,wd,wd2,Kz,KzO
REAL*8,DIMENSION(nz+4) :: eqmask,inmask,Iz, & 
	Temp,Q10r,TempFun, &
    !POM
    dn,dc,dp, &
	kdnA,kdnB,kdnC,kdnD,dnA,dnB,dnC, &
	kdcA,kdcB,kdcC,kdcD,dcA,dcB,dcC, &
	kdpA,kdpB,kdpC,kdpD,dpA,dpB,dpC, &
    !het bact type (1) that eats POM: 
	nbo,knboA,knboB,knboC,knboD,nboA,nboB,nboC, & !N biomass = Qn*X
	cbo,kcboA,kcboB,kcboC,kcboD,cboA,cboB,cboC, & !C biomass = Qc*X
	pbo,kpboA,kpboB,kpboC,kpboD,pboA,pboB,pboC, & !P biomass = Qp*X
	xbo,kxboA,kxboB,kxboC,kxboD,xboA,xboB,xboC, & !cell density X
    Qp_bo,Qc_bo,Qn_bo, &
    vnh4_bo,vpo4_bo,vdpon_bo,vdpoc_bo,vdpop_bo, &
    u_bo,rc_bo,rn_bo,rp_bo, &
    yc_bo,yn_bo,yp_bo, &
    !inorganics
    nh4,no2,no3,po4,dic,o, &
	knh4A,knh4B,knh4C,knh4D,nh4A,nh4B,nh4C, &
	kno2A,kno2B,kno2C,kno2D,no2A,no2B,no2C, &
	kno3A,kno3B,kno3C,kno3D,no3A,no3B,no3C, &
	kpo4A,kpo4B,kpo4C,kpo4D,po4A,po4B,po4C, &
	kdicA,kdicB,kdicC,kdicD,dicA,dicB,dicC, &
	koA,koB,koC,koD,oA,oB,oC, &
    !pp 3
	np3,knp3A,knp3B,knp3C,knp3D,np3A,np3B,np3C, & !N biomass = Qn*X
	cp3,kcp3A,kcp3B,kcp3C,kcp3D,cp3A,cp3B,cp3C, & !C biomass = Qc*X
	pp3,kpp3A,kpp3B,kpp3C,kpp3D,pp3A,pp3B,pp3C, & !P biomass = Qp*X
	xp3,kxp3A,kxp3B,kxp3C,kxp3D,xp3A,xp3B,xp3C, & !cell density X
    Qp_p3,Qc_p3,Qn_p3, &
    vnh4_p3,vno2_p3,vno3_p3,vpo4_p3,vdic_p3, &
    PC3,PCmax3,a_Ip3,chl2c_p3,PCmaxlight3,PClight3, &
    u_p3, &
    rc_p3,rn_p3,rp_p3, &
    yc_p3,yn_p3,yp_p3, &
    !pp 2
	np2,knp2A,knp2B,knp2C,knp2D,np2A,np2B,np2C, & !N biomass = Qn*X
	cp2,kcp2A,kcp2B,kcp2C,kcp2D,cp2A,cp2B,cp2C, & !C biomass = Qc*X
	pp2,kpp2A,kpp2B,kpp2C,kpp2D,pp2A,pp2B,pp2C, & !P biomass = Qp*X
	xp2,kxp2A,kxp2B,kxp2C,kxp2D,xp2A,xp2B,xp2C, & !cell density X
    Qp_p2,Qc_p2,Qn_p2, &
    vnh4_p2,vno2_p2,vno3_p2,vpo4_p2,vdic_p2, &
    PC2,PCmax2,a_Ip2,chl2c_p2, &!for Chl:C model
    u_p2, &
    rc_p2,rn_p2,rp_p2, &
    !nitrifiers
    bnh4,bno2, &
	kbnh4A,kbnh4B,kbnh4C,kbnh4D,bnh4A,bnh4B,bnh4C, &
	kbno2A,kbno2B,kbno2C,kbno2D,bno2A,bno2B,bno2C, &
    vnh4_bnh4,vno2_bno2, &
    u_bnh4,u_bno2, &
    !zoopl
    zoo,zoo2,zoo3, &
	kzooA,kzooB,kzooC,kzooD,zooA,zooB,zooC, &
	kzoo2A,kzoo2B,kzoo2C,kzoo2D,zoo2A,zoo2B,zoo2C, &
	kzoo3A,kzoo3B,kzoo3C,kzoo3D,zoo3A,zoo3B,zoo3C, &
	g,g2,g3, &
    !totals
    Chlt,ntot,bt,pt,btsq,btsq_nobo,ptsq, &
    mlinBnballt,mlinBcballt,mlinBpballt,nballtsq,cnballtsq,pnballtsq, &
    !other bio params (some general, some replaced for every pop):
    qlim,Qplim,Qclim,Qnlim, &
    vo,vnh4max,vpo4max, &
    nlimtot,limnh4,limno2,limno3,inhibnh4, & !explicit limits to ease equations later
    !limnh4p3,limno2p3,limno3p3, &
    no3uptakeP,no2emitP, &
    mortn,mortc,mortp, &
    np1!,nbo_pa !empty placeholders for now
REAL*8,DIMENSION(ndistr) :: Vmaxall, Vmaxall_w, kdnall, yd_ball, yo_ball, mlinBall !, burialc, burialn, burialp 
REAL*8,DIMENSION(nz+4,ndistr) :: & 
    !DOM
    don,doc,dop, &
    donT,docT,dopT, & !Temp variables to test new IC
	kdonA,kdonB,kdonC,kdonD,donA,donB,donC, &
	kdocA,kdocB,kdocC,kdocD,docA,docB,docC, &
	kdopA,kdopB,kdopC,kdopD,dopA,dopB,dopC, &
    !het bact multiple DOM eating types: 
	nball,knballA,knballB,knballC,knballD,nballA,nballB,nballC, & !N biomass = Qn*X
	cball,kcballA,kcballB,kcballC,kcballD,cballA,cballB,cballC, & !C biomass = Qc*X
	pball,kpballA,kpballB,kpballC,kpballD,pballA,pballB,pballC, & !P biomass = Qp*X
	xball,kxballA,kxballB,kxballC,kxballD,xballA,xballB,xballC, & !cell density X
    Qp_ball,Qc_ball,Qn_ball, &
    vnh4_ball,vpo4_ball,vdpon_ball,vdpoc_ball,vdpop_ball, &
    u_ball,rc_ball,rn_ball,rp_ball, &
    yc_ball,yn_ball,yp_ball
    !totals and fractions
    !donf,docf,dopf,qlim_ball 

!DAYINT
startSS=1 !set to 0 to define IC within this script 
startSSmult=1 !start with xball, 2D dom (need to have same ndistr)
dayint=100D0 !for recording frequency for resolved 1D for movies
dayint2=100D0 !for recording output frequency (replaced every time)
dailycycle=0 !for time-variant model resolving daily light cycle
recordDaily=0 !for recording each dt for movies of daily cycle
twop=0
!dommodel=1

kdnA(:)=0D0
kdnB(:)=0D0
kdnC(:)=0D0
kdnD(:)=0D0
kdonA(:,:)=0D0
kdonB(:,:)=0D0
kdonC(:,:)=0D0
kdonD(:,:)=0D0
!
kdcA(:)=0D0
kdcB(:)=0D0
kdcC(:)=0D0
kdcD(:)=0D0
kdocA(:,:)=0D0
kdocB(:,:)=0D0
kdocC(:,:)=0D0
kdocD(:,:)=0D0
!
kdpA(:)=0D0
kdpB(:)=0D0
kdpC(:)=0D0
kdpD(:)=0D0
kdopA(:,:)=0D0
kdopB(:,:)=0D0
kdopC(:,:)=0D0
kdopD(:,:)=0D0
!
knh4A(:)=0D0
knh4B(:)=0D0
knh4C(:)=0D0
knh4D(:)=0D0
kno2A(:)=0D0
kno2B(:)=0D0
kno2C(:)=0D0
kno2D(:)=0D0
kno3A(:)=0D0
kno3B(:)=0D0
kno3C(:)=0D0
kno3D(:)=0D0
!
kdicA(:)=0D0
kdicB(:)=0D0
kdicC(:)=0D0
kdicD(:)=0D0
!
kpo4A(:)=0D0
kpo4B(:)=0D0
kpo4C(:)=0D0
kpo4D(:)=0D0
!
koA(:)=0D0
koB(:)=0D0
koC(:)=0D0
koD(:)=0D0
!
kxboA(:)=0D0
kxboB(:)=0D0
kxboC(:)=0D0
kxboD(:)=0D0
knboA(:)=0D0
knboB(:)=0D0
knboC(:)=0D0
knboD(:)=0D0
kcboA(:)=0D0
kcboB(:)=0D0
kcboC(:)=0D0
kcboD(:)=0D0
kpboA(:)=0D0
kpboB(:)=0D0
kpboC(:)=0D0
kpboD(:)=0D0
!
kxballA(:,:)=0D0
kxballB(:,:)=0D0
kxballC(:,:)=0D0
kxballD(:,:)=0D0
knballA(:,:)=0D0
knballB(:,:)=0D0
knballC(:,:)=0D0
knballD(:,:)=0D0
kcballA(:,:)=0D0
kcballB(:,:)=0D0
kcballC(:,:)=0D0
kcballD(:,:)=0D0
kpballA(:,:)=0D0
kpballB(:,:)=0D0
kpballC(:,:)=0D0
kpballD(:,:)=0D0
!
kxp3A(:)=0D0
kxp3B(:)=0D0
kxp3C(:)=0D0
kxp3D(:)=0D0
knp3A(:)=0D0
knp3B(:)=0D0
knp3C(:)=0D0
knp3D(:)=0D0
kcp3A(:)=0D0
kcp3B(:)=0D0
kcp3C(:)=0D0
kcp3D(:)=0D0
kpp3A(:)=0D0
kpp3B(:)=0D0
kpp3C(:)=0D0
kpp3D(:)=0D0
!
kxp2A(:)=0D0
kxp2B(:)=0D0
kxp2C(:)=0D0
kxp2D(:)=0D0
knp2A(:)=0D0
knp2B(:)=0D0
knp2C(:)=0D0
knp2D(:)=0D0
kcp2A(:)=0D0
kcp2B(:)=0D0
kcp2C(:)=0D0
kcp2D(:)=0D0
kpp2A(:)=0D0
kpp2B(:)=0D0
kpp2C(:)=0D0
kpp2D(:)=0D0
!
kbnh4A(:)=0D0
kbnh4B(:)=0D0
kbnh4C(:)=0D0
kbnh4D(:)=0D0
kbno2A(:)=0D0
kbno2B(:)=0D0
kbno2C(:)=0D0
kbno2D(:)=0D0
!
kzooA(:)=0D0
kzooB(:)=0D0
kzooC(:)=0D0
kzooD(:)=0D0
kzoo2A(:)=0D0
kzoo2B(:)=0D0
kzoo2C(:)=0D0
kzoo2D(:)=0D0
kzoo3A(:)=0D0
kzoo3B(:)=0D0
kzoo3C(:)=0D0
kzoo3D(:)=0D0
!

print*,'Run for total n of days:';print*,ndays
print*,'1D version'
print*,'nz is:'; print*,nz

nt=ndays/dt

print*,'Number of days:'
print*,ndays
print*,'Number of timesteps:'
print*,nt

!!bring in all the Vmax's to fill boall and dall:
!!for the old VmaxA.txt, the faster Vmaxes are first.
!!OPEN(UNIT=3,FILE='VmaxA.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
!!    read(3,*) (Vmaxall(J),J=1,ndistr)    
!!    close(3)
!!new: now, values from a logarithic distribution, with weights:
!!now, the SLOWER Vmaxes are first. the range is from 0.01 to 100
!from: /Users/ezakem/Documents/THEME/ScalingUp/code/Theoretical/RateDistributions
!OPEN(UNIT=3,FILE='VmaxA10_values.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
OPEN(UNIT=3,FILE='VmaxA_values_n25s2.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
!me putting values in to test:
!OPEN(UNIT=3,FILE='VmaxA_values.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
    read(3,*) (Vmaxall(J),J=1,ndistr)    
    close(3)

!OPEN(UNIT=3,FILE='VmaxA10_weights.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
OPEN(UNIT=3,FILE='VmaxA_weights_n25s2.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
!me putting values in to test:
!OPEN(UNIT=3,FILE='VmaxA_weights.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
    read(3,*) (Vmaxall_w(J),J=1,ndistr)    
    close(3)

!OPEN(UNIT=3,FILE='ycmaxA_values.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
!    read(3,*) (yd_ball(J),J=1,ndistr)    
!    close(3)

!or assign manually:
!Vmaxall(1) = pd_max
!Vmaxall(2) = pd_max
!Vmaxall_w comes in to play in the FORMATION of the DOM -- the distribution
!Vmaxall_w(1) = 1D0
!Vmaxall_w(2) = 0D0
yd_ball(:) = yd_bo

kdnall = Vmaxall/10D3

!mlinB=pd_max*yd_bo*fmlin, &
mlinBall=Vmaxall*yd_ball*fmlin

!now write for import into python:
OPEN(UNIT=5,FILE='VmaxA_fromF.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (Vmaxall(J),J=1,ndistr)
CLOSE(5)
OPEN(UNIT=5,FILE='VmaxA_w_fromF.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (Vmaxall_w(J),J=1,ndistr)
CLOSE(5)
OPEN(UNIT=5,FILE='kdnall_fromF.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (kdnall(J),J=1,ndistr)
CLOSE(5)
OPEN(UNIT=5,FILE='ycmaxA_fromF.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (yd_ball(J),J=1,ndistr)
CLOSE(5)

yo_ball=yd_ball/20D0*4D0/(1D0-yd_ball) !mol cells/mol O2 -where cells have 1mol N 

print*,'ndistr:'
print*,ndistr
print*,'Vmaxall:'
print*,Vmaxall
print*,'Vmaxall weights:'
print*,Vmaxall_w
print*,'kdnall:'
print*,kdnall
print*,'yd_ball:'
print*,yd_ball
print*,'yo_ball:'
print*,yo_ball

mlboxes=100D0/dz !discrete n of boxes in the mixed layer, close to 100m total sum
koverh=Kgast/100D0/mlboxes *3600D0*24D0 !gas transfer coefficient for each of the n boxes comprising the ml

ALLOCATE(time(nt))
!(old)ALLOCATE(burial(nt+1))
ind=ndays/dayint2
ALLOCATE(sumall(ind,35)) !added: dc,doc,dp,dop,po4,dic

!sinking speed for detritus
wd(:)=Ws
wd(1)=0D0
wd(nz+1)=0D0
wd2(:)=Ws2
wd2(1)=0D0
wd2(nz+1)=0D0

!1D model: no advection for other tracers
	w(:)=0D0
	wd=wd+w; !vertical velocity combination for detritus
	wd2=wd2+w; !vertical velocity combination for detritus

!Diffusion:
Kz=(kappazmax*exp(-z/mlz)+kappazmin+1D-2*exp((z-H)/100D0))*3600D0*24D0 !larger at bottom boundary, too

Temp(:)=0D0 
Temp(3:nz+2)=12D0*exp(-zm/150D0)+12D0*exp(-zm/500D0)+2D0
TempFun = TempCoeffArr*exp(TempAeArr*(1D0/(Temp+Tkel)-1D0/TemprefArr))

KzO=Kz
KzO(1)=0D0
!for an open boundary: a sink for oxygen:
!KzO(nz+1)=(kappazmin+1D-2*exp((H-H)/100D0))*3600D0*24D0 
!for a closed boundary: a fixed o2
KzO(nz+1)=0D0

Kz(1)=0D0
Kz(nz+1)=0D0

eqmask(:)=0D0
eqmask(3:mlboxes+2)=1D0; !mask for air-sea equilibration

inmask(:)=0D0
inmask(3:nz+2)=1D0 !mask to zero out ghost cells for tracers and other quantities affecting tracers

!SSFILES
!import previous steady state as IC:

if (startSS.eq.1) then

		OPEN(UNIT=3,FILE='nh4_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (nh4(J),J=1,nz+4)
		CLOSE(3)
		
		OPEN(UNIT=3,FILE='no2_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (no2(J),J=1,nz+4)
		CLOSE(3)
		
		OPEN(UNIT=3,FILE='no3_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (no3(J),J=1,nz+4)
		CLOSE(3)

		OPEN(UNIT=3,FILE='dic_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (dic(J),J=1,nz+4)
		CLOSE(3)

		OPEN(UNIT=3,FILE='po4_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (po4(J),J=1,nz+4)
		CLOSE(3)

		OPEN(UNIT=3,FILE='dn_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
        read(3,*) (dn(J),J=1,nz+4)
		CLOSE(3)

		OPEN(UNIT=3,FILE='dc_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (dc(J),J=1,nz+4)
		CLOSE(3)

		OPEN(UNIT=3,FILE='dp_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (dp(J),J=1,nz+4)
		CLOSE(3)

    if (startSSmult.eq.1) then
		
        OPEN(UNIT=3,FILE='dop_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
        DO I=1,ndistr
        read(3,*) (dop(J,I),J=1,nz+4)
        END DO
		CLOSE(3)

		OPEN(UNIT=3,FILE='don_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
        DO I=1,ndistr
        read(3,*) (don(J,I),J=1,nz+4)
        END DO
		CLOSE(3)

		OPEN(UNIT=3,FILE='doc_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
        DO I=1,ndistr
        read(3,*) (doc(J,I),J=1,nz+4)
        END DO
		CLOSE(3)
    
        OPEN(UNIT=3,FILE='nball_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
        DO I=1,ndistr
        read(3,*) (nball(J,I),J=1,nz+4)
        END DO
		CLOSE(3)

        OPEN(UNIT=3,FILE='cball_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
        DO I=1,ndistr
        read(3,*) (cball(J,I),J=1,nz+4)
        END DO
		CLOSE(3)

        OPEN(UNIT=3,FILE='pball_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
        DO I=1,ndistr
        read(3,*) (pball(J,I),J=1,nz+4)
        END DO
		CLOSE(3)

        OPEN(UNIT=3,FILE='xball_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
        DO I=1,ndistr
        read(3,*) (xball(J,I),J=1,nz+4)
        END DO
		CLOSE(3)

    end if 

		OPEN(UNIT=3,FILE='o_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (o(J),J=1,nz+4)
		CLOSE(3)

		OPEN(UNIT=3,FILE='nbo_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (nbo(J),J=1,nz+4)
		CLOSE(3)

		OPEN(UNIT=3,FILE='cbo_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (cbo(J),J=1,nz+4)
		CLOSE(3)

		OPEN(UNIT=3,FILE='pbo_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (pbo(J),J=1,nz+4)
		CLOSE(3)

		OPEN(UNIT=3,FILE='xbo_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (xbo(J),J=1,nz+4)
		CLOSE(3)

		!OPEN(UNIT=3,FILE='nball_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
        !DO I=1,ndistr
        !read(3,*) (nball(J,I),J=1,nz+4)
        !END DO
		!CLOSE(3)

		!OPEN(UNIT=3,FILE='cball_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
        !DO I=1,ndistr
        !read(3,*) (cball(J,I),J=1,nz+4)
        !END DO
		!CLOSE(3)

		!OPEN(UNIT=3,FILE='pball_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
        !DO I=1,ndistr
        !read(3,*) (pball(J,I),J=1,nz+4)
        !END DO
		!CLOSE(3)

		!OPEN(UNIT=3,FILE='xball_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
        !DO I=1,ndistr
        !read(3,*) (xball(J,I),J=1,nz+4)
        !END DO
		!CLOSE(3)

		OPEN(UNIT=3,FILE='np2_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (np2(J),J=1,nz+4)
		CLOSE(3)

		OPEN(UNIT=3,FILE='cp2_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (cp2(J),J=1,nz+4)
		CLOSE(3)

		OPEN(UNIT=3,FILE='pp2_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (pp2(J),J=1,nz+4)
		CLOSE(3)

		OPEN(UNIT=3,FILE='xp2_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (xp2(J),J=1,nz+4)
		CLOSE(3)

		OPEN(UNIT=3,FILE='np3_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (np3(J),J=1,nz+4)
		CLOSE(3)

		OPEN(UNIT=3,FILE='cp3_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (cp3(J),J=1,nz+4)
		CLOSE(3)

		OPEN(UNIT=3,FILE='pp3_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (pp3(J),J=1,nz+4)
		CLOSE(3)

		OPEN(UNIT=3,FILE='xp3_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (xp3(J),J=1,nz+4)
		CLOSE(3)

		OPEN(UNIT=3,FILE='bnh4_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (bnh4(J),J=1,nz+4)
		CLOSE(3)
		
		OPEN(UNIT=3,FILE='bno2_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (bno2(J),J=1,nz+4)
		CLOSE(3)

		OPEN(UNIT=3,FILE='zoo_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (zoo(J),J=1,nz+4)
		CLOSE(3)
		
		OPEN(UNIT=3,FILE='zoo2_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (zoo2(J),J=1,nz+4)
		CLOSE(3)
		
		OPEN(UNIT=3,FILE='zoo3_fSS.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
		read(3,*) (zoo3(J),J=1,nz+4)
		CLOSE(3)

else

		!!Initial Conditions from simple distributions (may break now bc of steep gradients):
		nh4(:)=0.01D-3
		no2(:)=0.1D-3
		!bo(:)=inmask*1D-5
		bnh4(:)=inmask*1D-5
		bno2(:)=inmask*1D-5
		!p2(:)=inmask*1D-5
        !p3(:)=inmask*1D-5

		o(:)=inmask*0.1D0 !mol/m3 crude estimate 
		zoo(:)=inmask*1D-5
		zoo2(:)=inmask*1D-5
		zoo3(:)=inmask*1D-5
		
        no3(3:nz+2)=0.03D0*(1D0-exp(-zm/200D0)) ! n increases with depth

		dn(:)=0D0 !start with none

end if

!INITIAL CONDITIONS    

!now replace/modify incoming SS concs:

!!if not in SS, or if replacing
!DO I=1,ndistr
!    nball(:,I) = nbo/2D0
!    cball(:,I) = cbo/2D0
!    pball(:,I) = pbo/2D0
!    xball(:,I) = xbo/2D0
!    don(:,I) = dn
!    doc(:,I) = dn*5D0
!    dop(:,I) = dn/16D0
!END DO


!placeholders
np1(:)=0D0
!nbo_pa(:)=0D0 !bc even with dommodel, i am still only using one het pop

!actually zeroing out pops
!xp2(:)=0D0
!np2(:)=0D0

zoo(:)=0D0
zoo2(:)=0D0
zoo3(:)=0D0

!po4=no3/16D0
!dic(:)=1D1*inmask

!originally: no3 = no3*1.1D0

!start quota from non-quota SS: nbo loaded above from SS bo
!np3 = inmask*1D-4
!pp3 = np3*Rb_PN
!cp3 = np3*Rb_CN
!xp3 = np3/Qminn/5D0

!can't zero out np2!!
!np2 = np3/10D0
!pp2 = np2*Rb_PN
!cp2 = np2*Rb_CN
!xp2 = np2/Qminn/5D0
!instead:
!NOTE: have to change equations to zero out and still ahve it work.
if (twop.eq.0) then
    np2 = 0D0 
    pp2 = 0D0 
    cp2 = 0D0 
    xp2 = 0D0 
end if

!dn(:)=0D0
!don(:)=0D0
!dc(:)=0D0
!doc(:)=0D0
!dp(:)=0D0
!dop(:)=0D0

!don = np3*10D0
!dn = np3*10D0
!doc = don*Rb_CN

!dop = don*Rb_PN
!!dc = dn*Rb_CN
!dp = dn*Rb_PN

!bnh4 = inmask*1D-5
!bno2 = inmask*1D-5

!!INITIAL CONDITIONS NEW
!!Nov 2018: start with realistic IC to allow for realistic total amts of N and P
!!!no3(3:nz+2)=0.04D0*(1D0-exp(-zm/200D0)) ! n increases with depth
!no3 = (0.04D0/no3(nz+2))*no3
!po4 = no3*Rb_PN
!
!!Dec 7 2018: better IC that get same distributions with depth and also DON and
!!DOP
!print*,'doc and don before and after:'
!print*,doc(3,:)*1D3
!print*,'doc and don before and after:'
!print*,don(3,:)*1D3
!docT(:,:)=0D0
!donT(:,:)=0D0
!dopT(:,:)=0D0
!
!!HAVE to do these two loops! if not, fortran does WEIRD things (sometimes right, sometimes wrong!)
!do J=1,nz; jc=J+2;
!    DO I=1,ndistr
!        !doc(nz+3:nz+2,I) = doc(3:nz+2,I)*0.04D0/SUM(doc(3:nz+2,:))
!        !don(3:nz+2,I) = don(3:nz+2,I)*0.04D0/SUM(doc(3:nz+2,:)) !I CHECKED!
!        !dop(3:nz+2,I) = dop(3:nz+2,I)*0.04D0/SUM(doc(3:nz+2,:))
!        docT(jc,I) = doc(jc,I)*0.04D0/SUM(doc(jc,:))
!        donT(jc,I) = don(jc,I)*0.04D0/SUM(doc(jc,:))
!        dopT(jc,I) = dop(jc,I)*0.04D0/SUM(doc(jc,:))
!        !don(3:nz+2,I) = don(3:nz+2,I)*0.04D0/SUM(doc(3:nz+2,:)) !I CHECKED!
!        !dop(3:nz+2,I) = dop(3:nz+2,I)*0.04D0/SUM(doc(3:nz+2,:))
!    END DO
!END DO
!doc = docT
!don = donT
!dop = dopT
!print*,'doc and don after:'
!print*,doc(3,:)*1D3
!print*,'doc and don after:'
!print*,don(3,:)*1D3
!!don = doc/6.6D0 !set with redfield -- closeish concs are ok
!!dop = don/16D0

!!start with surface concs everywhere:
!do I=1,ndistr
!        doc(4:nz+2,I) = doc(3,I)
!end do
!
!don = doc/10D0
!dop = don/16D0


OPEN(UNIT=5,FILE='time_record.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)

!prevendday = 468400D0 + 278200D0 !restart on 4/23/19 from pele 
prevendday = 0D0 
!start with previous end run time:
OPEN(UNIT=7,FILE='time_record.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
WRITE(7,*) (prevendday)
CLOSE(7)

if (recordDaily.eq.1) then !haven't added C and P to this

OPEN(UNIT=5,FILE='Iin.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)

OPEN(UNIT=5,FILE='Iz.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)

OPEN(UNIT=5,FILE='time_all.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)

OPEN(UNIT=5,FILE='nh4_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',STATUS='REPLACE')
CLOSE(5)	
OPEN(UNIT=5,FILE='no2_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',STATUS='REPLACE')
CLOSE(5)
OPEN(UNIT=5,FILE='no3_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',STATUS='REPLACE')
CLOSE(5)
OPEN(UNIT=5,FILE='dn_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)
OPEN(UNIT=5,FILE='don_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)
OPEN(UNIT=5,FILE='o_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)	
OPEN(UNIT=5,FILE='bo_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)	
OPEN(UNIT=5,FILE='bo_pa_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)	
OPEN(UNIT=5,FILE='bnh4_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)
OPEN(UNIT=5,FILE='bno2_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)
OPEN(UNIT=5,FILE='ubo_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)
OPEN(UNIT=5,FILE='ubnh4_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)
OPEN(UNIT=5,FILE='ubno2_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)
OPEN(UNIT=5,FILE='up_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)
OPEN(UNIT=5,FILE='zoo_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)
OPEN(UNIT=5,FILE='zoo2_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)
OPEN(UNIT=5,FILE='zoo3_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)
OPEN(UNIT=5,FILE='p2_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)
OPEN(UNIT=5,FILE='p3_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)
OPEN(UNIT=5,FILE='xp2_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)
OPEN(UNIT=5,FILE='xp3_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',status='REPLACE')
CLOSE(5)


end if 

!START LOOP
print *,'Starting time loop:'
do t=1,nt


!LIGHT:
if (dailycycle.eq.1) then !Incoming light daily cycle:
    Iin=Iinmax/2D0*(cos(t*dt*2D0*3.1416D0)+1D0)
else !No daily cycle:
    Iin=Iinmax/2D0
end if

!chl impact on light:
Chlt=(cp2*chl2c_p2+cp3*chl2c_p3)!*6.6D0 !molN/m3 *mgChl/mmolC *5molC/molN = gChl

do j=1,nz
    Iz(j+2)=Iin*exp(-zm(j)*(1/euz+sum(Chlt(3:j+2)*a_chlD))) !this one sums the k at each depth
end do

i=dayint2*1000
j=t*dt*1000

if (MOD(j,i).eq.0) then
	!trace the integral:
	ind=t*dt/dayint2
	
	time(ind)=(t-1)*dt 

	ntot=nh4+no2+no3

!SUMS    
	sumall(ind,1)=sum(o)*dz !mol/m3 times volume (with dx=1,dy=1)
	sumall(ind,2)=sum(dn)*dz
	sumall(ind,3)=sum(don)*dz
	sumall(ind,4)=sum(nbo)*dz
	sumall(ind,5)=sum(nball)*dz !zeroed out placeholder
    sumall(ind,6)=sum(bnh4)*dz
	sumall(ind,7)=sum(bno2)*dz
	sumall(ind,8)=sum(zoo)*dz
	sumall(ind,9)=sum(ntot)*dz
	sumall(ind,10)=sum(nh4)*dz
	sumall(ind,11)=sum(no2)*dz
	sumall(ind,12)=sum(no3)*dz
	sumall(ind,13)=sum(np1)*dz !zeroed out placeholder
	sumall(ind,14)=sum(np2)*dz
	sumall(ind,15)=sum(np3)*dz
	sumall(ind,16)=sum(zoo2)*dz
	sumall(ind,17)=sum(zoo3)*dz
	sumall(ind,18)=sum(dc)*dz
    sumall(ind,19)=sum(doc)*dz
	sumall(ind,20)=sum(dp)*dz
    sumall(ind,21)=sum(dop)*dz
	sumall(ind,22)=sum(dic)*dz
	sumall(ind,23)=sum(po4)*dz
	sumall(ind,24)=sum(xbo)*dz
	sumall(ind,25)=sum(cbo)*dz
	sumall(ind,26)=sum(pbo)*dz
	sumall(ind,27)=sum(xp2)*dz
	sumall(ind,28)=sum(cp2)*dz
	sumall(ind,29)=sum(pp2)*dz
	sumall(ind,30)=sum(xp3)*dz
	sumall(ind,31)=sum(cp3)*dz
	sumall(ind,32)=sum(pp3)*dz
	sumall(ind,33)=sum(xball)*dz
	sumall(ind,34)=sum(cball)*dz
	sumall(ind,35)=sum(pball)*dz

end if


call MYRK(nh4,knh4A,nh4A, &
          no2,kno2A,no2A, &
          no3,kno3A,no3A, &
          po4,kpo4A,po4A, &
          dic,kdicA,dicA, &
          o,koA,oA, &
          !organics
          dn,kdnA,dnA, &
          don,kdonA,donA, &
          dp,kdpA,dpA, &
          dop,kdopA,dopA, &
          dc,kdcA,dcA, &
          doc,kdocA,docA, &
          !het bact-POM:
          xbo,kxboA,xboA, &
          nbo,knboA,nboA, &
          pbo,kpboA,pboA, &
          cbo,kcboA,cboA, &
          !het bact-DOM:
          xball,kxballA,xballA, &
          nball,knballA,nballA, &
          pball,kpballA,pballA, &
          cball,kcballA,cballA, &
          !pp 3 (Pro-like)
          xp3,kxp3A,xp3A, & 
          np3,knp3A,np3A, &
          pp3,kpp3A,pp3A, &
          cp3,kcp3A,cp3A, &
          !pp 2 (Diatom-like)
          xp2,kxp2A,xp2A, & 
          np2,knp2A,np2A, &
          pp2,kpp2A,pp2A, &
          cp2,kcp2A,cp2A, &
          !nitrifiers
          bnh4,kbnh4A,bnh4A, &
          bno2,kbno2A,bno2A, &
          !zoopl
          zoo,kzooA,zooA, &
          zoo2,kzoo2A,zoo2A, &
          zoo3,kzoo3A,zoo3A)

call MYRK(nh4A,knh4B,nh4B, &
          no2A,kno2B,no2B, &
          no3A,kno3B,no3B, &
          po4A,kpo4B,po4B, &
          dicA,kdicB,dicB, &
          oA,koB,oB, & 
          !organics
          dnA,kdnB,dnB, &
          donA,kdonB,donB, &
          dpA,kdpB,dpB, &
          dopA,kdopB,dopB, &
          dcA,kdcB,dcB, &
          docA,kdocB,docB, & 
          !het bact
          xboA,kxboB,xboB, &
          nboA,knboB,nboB, &
          pboA,kpboB,pboB, &
          cboA,kcboB,cboB, & 
          !het bact
          xballA,kxballB,xballB, &
          nballA,knballB,nballB, &
          pballA,kpballB,pballB, &
          cballA,kcballB,cballB, & 
          !pp 3 (Pro-like)
          xp3A,kxp3B,xp3B, & 
          np3A,knp3B,np3B, &
          pp3A,kpp3B,pp3B, &
          cp3A,kcp3B,cp3B, & 
          !pp 2 (Diatom-like)
          xp2A,kxp2B,xp2B, & 
          np2A,knp2B,np2B, &
          pp2A,kpp2B,pp2B, &
          cp2A,kcp2B,cp2B, & 
          !nitrifiers
          bnh4A,kbnh4B,bnh4B, &
          bno2A,kbno2B,bno2B, & 
          !zoopl
          zooA,kzooB,zooB, &
          zoo2A,kzoo2B,zoo2B, &
          zoo3A,kzoo3B,zoo3B)

call MYRK(nh4B,knh4C,nh4C, &
          no2B,kno2C,no2C, &
          no3B,kno3C,no3C, &
          po4B,kpo4C,po4C, &
          dicB,kdicC,dicC, &
          oB,koC,oC, & 
          !organics
          dnB,kdnC,dnC, &
          donB,kdonC,donC, &
          dpB,kdpC,dpC, &
          dopB,kdopC,dopC, &
          dcB,kdcC,dcC, &
          docB,kdocC,docC, & 
          !het bact
          xboB,kxboC,xboC, &
          nboB,knboC,nboC, &
          pboB,kpboC,pboC, &
          cboB,kcboC,cboC, & 
          !het bact
          xballB,kxballC,xballC, &
          nballB,knballC,nballC, &
          pballB,kpballC,pballC, &
          cballB,kcballC,cballC, & 
          !pp 3 (Pro-like)
          xp3B,kxp3C,xp3C, & 
          np3B,knp3C,np3C, &
          pp3B,kpp3C,pp3C, &
          cp3B,kcp3C,cp3C, & 
          !pp 2 (Diatom-like)
          xp2B,kxp2C,xp2C, & 
          np2B,knp2C,np2C, &
          pp2B,kpp2C,pp2C, &
          cp2B,kcp2C,cp2C, & 
          !nitrifiers
          bnh4B,kbnh4C,bnh4C, &
          bno2B,kbno2C,bno2C, & 
          !zoopl
          zooB,kzooC,zooC, &
          zoo2B,kzoo2C,zoo2C, &
          zoo3B,kzoo3C,zoo3C)

call MYRK(nh4C,knh4D,nh4A, &
          no2C,kno2D,no2A, &
          no3C,kno3D,no3A, &
          po4C,kpo4D,po4A, &
          dicC,kdicD,dicA, &
          oC,koD,oA, &
          !organics
          dnC,kdnD,dnA, &
          donC,kdonD,donA, &
          dpC,kdpD,dpA, &
          dopC,kdopD,dopA, &
          dcC,kdcD,dcA, &
          docC,kdocD,docA, &
          !het bact
          xboC,kxboD,xboA, &
          nboC,knboD,nboA, &
          pboC,kpboD,pboA, &
          cboC,kcboD,cboA, &
          !het bact
          xballC,kxballD,xballA, &
          nballC,knballD,nballA, &
          pballC,kpballD,pballA, &
          cballC,kcballD,cballA, &
          !pp 3 (Pro-like)
          xp3C,kxp3D,xp3A, & 
          np3C,knp3D,np3A, &
          pp3C,kpp3D,pp3A, &
          cp3C,kcp3D,cp3A, &
          !pp 2 (Diatom-like)
          xp2C,kxp2D,xp2A, & 
          np2C,knp2D,np2A, &
          pp2C,kpp2D,pp2A, &
          cp2C,kcp2D,cp2A, &
          !nitrifiers
          bnh4C,kbnh4D,bnh4A, &
          bno2C,kbno2D,bno2A, &
          !zoopl
          zooC,kzooD,zooA, &
          zoo2C,kzoo2D,zoo2A, &
          zoo3C,kzoo3D,zoo3A)

!INTEGRATE
nh4 = nh4 + dt/6D0*(knh4A + 2D0*knh4B + 2D0*knh4C + knh4D);
no2 = no2 + dt/6D0*(kno2A + 2D0*kno2B + 2D0*kno2C + kno2D);
no3 = no3 + dt/6D0*(kno3A + 2D0*kno3B + 2D0*kno3C + kno3D);
po4 = po4 + dt/6D0*(kpo4A + 2D0*kpo4B + 2D0*kpo4C + kpo4D);
dic = dic + dt/6D0*(kdicA + 2D0*kdicB + 2D0*kdicC + kdicD);
o = o + dt/6D0*(koA + 2D0*koB + 2D0*koC + koD);	
!
dn = dn + dt/6D0*(kdnA + 2D0*kdnB + 2D0*kdnC + kdnD);
don = don + dt/6D0*(kdonA + 2D0*kdonB + 2D0*kdonC + kdonD);
dc = dc + dt/6D0*(kdcA + 2D0*kdcB + 2D0*kdcC + kdcD);
doc = doc + dt/6D0*(kdocA + 2D0*kdocB + 2D0*kdocC + kdocD);
dp = dp + dt/6D0*(kdpA + 2D0*kdpB + 2D0*kdpC + kdpD);
dop = dop + dt/6D0*(kdopA + 2D0*kdopB + 2D0*kdopC + kdopD);
!
xbo = xbo + dt/6D0*(kxboA + 2D0*kxboB + 2D0*kxboC + kxboD);
cbo = cbo + dt/6D0*(kcboA + 2D0*kcboB + 2D0*kcboC + kcboD);
nbo = nbo + dt/6D0*(knboA + 2D0*knboB + 2D0*knboC + knboD);
pbo = pbo + dt/6D0*(kpboA + 2D0*kpboB + 2D0*kpboC + kpboD);
!
xball = xball + dt/6D0*(kxballA + 2D0*kxballB + 2D0*kxballC + kxballD);
cball = cball + dt/6D0*(kcballA + 2D0*kcballB + 2D0*kcballC + kcballD);
nball = nball + dt/6D0*(knballA + 2D0*knballB + 2D0*knballC + knballD);
pball = pball + dt/6D0*(kpballA + 2D0*kpballB + 2D0*kpballC + kpballD);
!
xp3 = xp3 + dt/6D0*(kxp3A + 2D0*kxp3B + 2D0*kxp3C + kxp3D);
cp3 = cp3 + dt/6D0*(kcp3A + 2D0*kcp3B + 2D0*kcp3C + kcp3D);
np3 = np3 + dt/6D0*(knp3A + 2D0*knp3B + 2D0*knp3C + knp3D);
pp3 = pp3 + dt/6D0*(kpp3A + 2D0*kpp3B + 2D0*kpp3C + kpp3D);
!
if (twop.eq.1) then
xp2 = xp2 + dt/6D0*(kxp2A + 2D0*kxp2B + 2D0*kxp2C + kxp2D);
cp2 = cp2 + dt/6D0*(kcp2A + 2D0*kcp2B + 2D0*kcp2C + kcp2D);
np2 = np2 + dt/6D0*(knp2A + 2D0*knp2B + 2D0*knp2C + knp2D);
pp2 = pp2 + dt/6D0*(kpp2A + 2D0*kpp2B + 2D0*kpp2C + kpp2D);
end if
!
bnh4 = bnh4 + dt/6D0*(kbnh4A + 2D0*kbnh4B + 2D0*kbnh4C + kbnh4D);
bno2 = bno2 + dt/6D0*(kbno2A + 2D0*kbno2B + 2D0*kbno2C + kbno2D);
!
!zoo = zoo + dt/6D0*(kzooA + 2D0*kzooB + 2D0*kzooC + kzooD);	
!zoo2 = zoo2 + dt/6D0*(kzoo2A + 2D0*kzoo2B + 2D0*kzoo2C + kzoo2D);	
!zoo3 = zoo3 + dt/6D0*(kzoo3A + 2D0*kzoo3B + 2D0*kzoo3C + kzoo3D);	

if (recordDaily.eq.1) then

!append at every time step: haven't added CNP to this either
print*,t*dt		
	OPEN(UNIT=7,FILE='Iin.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
	WRITE(7,*) (Iin)
	CLOSE(7)

OPEN(UNIT=5,FILE='Iz.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
WRITE(5,*) (Iz)
CLOSE(5)	

print*,t*dt		
	OPEN(UNIT=7,FILE='time_all.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
	WRITE(7,*) (t*dt)
	CLOSE(7)	

OPEN(UNIT=5,FILE='nh4_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
WRITE(5,*) (nh4)
CLOSE(5)	
OPEN(UNIT=5,FILE='no2_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
WRITE(5,*) (no2)
CLOSE(5)
OPEN(UNIT=5,FILE='no3_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
WRITE(5,*) (no3)
CLOSE(5)
OPEN(UNIT=5,FILE='d_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
WRITE(5,*) (dn)
CLOSE(5)
OPEN(UNIT=5,FILE='don_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
WRITE(5,*) (don)
CLOSE(5)
OPEN(UNIT=5,FILE='o_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
WRITE(5,*) (o)
CLOSE(5)	
!OPEN(UNIT=5,FILE='nbo_pa_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
!WRITE(5,*) (nbo_pa)
CLOSE(5)	
OPEN(UNIT=5,FILE='bnh4_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
WRITE(5,*) (bnh4)
CLOSE(5)
OPEN(UNIT=5,FILE='bno2_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
WRITE(5,*) (bno2)
CLOSE(5)
OPEN(UNIT=5,FILE='ubo_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
WRITE(5,*) (u_bo)
CLOSE(5)
OPEN(UNIT=5,FILE='ubnh4_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
WRITE(5,*) (u_bnh4)
CLOSE(5)
OPEN(UNIT=5,FILE='ubno2_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
WRITE(5,*) (u_bno2)
CLOSE(5)
OPEN(UNIT=5,FILE='up2_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
WRITE(5,*) (u_p2)
CLOSE(5)
OPEN(UNIT=5,FILE='up3_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
WRITE(5,*) (u_p3)
CLOSE(5)
OPEN(UNIT=5,FILE='zoo_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
WRITE(5,*) (zoo)
CLOSE(5)
OPEN(UNIT=5,FILE='zoo2_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
WRITE(5,*) (zoo2)
CLOSE(5)
OPEN(UNIT=5,FILE='zoo3_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
WRITE(5,*) (zoo3)
CLOSE(5)
OPEN(UNIT=5,FILE='xp2_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
WRITE(5,*) (xp2)
CLOSE(5)	
OPEN(UNIT=5,FILE='xp3_fa.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
WRITE(5,*) (xp3)
CLOSE(5)	

end if

!RECORD DAYINT

if (MOD(t*dt,1.00).eq.0) then
	print*,t*dt		
	print*,no3(3) !to check for crashing		
	OPEN(UNIT=7,FILE='time_record.txt',ACCESS='SEQUENTIAL',BLANK='ZERO',POSITION='APPEND')
	WRITE(7,*) (t*dt+prevendday)
	CLOSE(7)	
end if

if ((MOD(t*dt,dayint).eq.0).OR.(t*dt.eq.ndays)) then

    
OPEN(UNIT=5,FILE='chl2c_p2.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (chl2c_p2(J),J=1,nz+4)
CLOSE(5)
OPEN(UNIT=5,FILE='chl2c_p3.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (chl2c_p3(J),J=1,nz+4)
CLOSE(5)

!NOTE: using no3uptakeP as a placeholder for recording multiple quantities for N fluxes:
!diff
    do j=1,nz ; jc=j+2;
        call mydiff(no2,Kz,j,dz,nz,diff)
            no3uptakeP(jc)=diff
    end do
OPEN(UNIT=5,FILE='kno2_diff.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (no3uptakeP(J),J=1,nz+4)
CLOSE(5)

!source: NH4 oxidizer:
no3uptakeP=eno2_bnh4*u_bnh4*bnh4
OPEN(UNIT=5,FILE='kno2_nh4oxid.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (no3uptakeP(J),J=1,nz+4)
CLOSE(5)

!sink: NO2 oxidizer:
no3uptakeP=-1/yno2_bno2*u_bno2*bno2
OPEN(UNIT=5,FILE='kno2_no2oxid.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (no3uptakeP(J),J=1,nz+4)
CLOSE(5)

!sink: phytopl 2 use:
no3uptakeP=vno2_p2!-u_p2*p2*limno2/(limnh4+limno2+1D-38)
OPEN(UNIT=5,FILE='kno2_p2use.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (no3uptakeP(J),J=1,nz+4)
CLOSE(5)

!sink: phytopl 3 use of nitrite:
no3uptakeP=vno2_p3!-u_p3*p3*limno2/(limnh4+limno2+limno3+1D-38)
OPEN(UNIT=5,FILE='kno2_p3use.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (no3uptakeP(J),J=1,nz+4)
CLOSE(5)

!!now, the pp uptake of each N:
!no3 uptake by pp3
no3uptakeP=vno3_p3!-u_p3*p3*limno3/(nlimtot+1D-38) !more than based on just u_p bc of inefficiency
OPEN(UNIT=5,FILE='P3uptakeNO3.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (no3uptakeP(J),J=1,nz+4)
CLOSE(5)

!no2 uptake by pp2: (still using no3uptake as placeholder): (this is redundant with above kno2_puse.txt)
no3uptakeP=vno2_p2!-u_p2*p2*limno2/(limnh4+limno2+1D-38)
OPEN(UNIT=5,FILE='P2uptakeNO2.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (no3uptakeP(J),J=1,nz+4)
CLOSE(5)

!no2 uptake by pp3: (still using no3uptake as placeholder): (this is redundant with above kno2_puse.txt)
no3uptakeP=vno2_p3!-u_p3*p3*limno2/(nlimtot+1D-38)
OPEN(UNIT=5,FILE='P3uptakeNO2.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (no3uptakeP(J),J=1,nz+4)
CLOSE(5)

!nh4 uptake by pp2: (still using no3uptake as placeholder): (this is redundant with above kno2_puse.txt)
no3uptakeP=vnh4_p2!u_p2*p2*limnh4/(limnh4+limno2+1D-38)
OPEN(UNIT=5,FILE='P2uptakeNH4.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (no3uptakeP(J),J=1,nz+4)
CLOSE(5)

!nh4 uptake by pp3: (still using no3uptake as placeholder): (this is redundant with above kno2_puse.txt)
no3uptakeP=vnh4_p3!-u_p3*p3*limnh4/(nlimtot+1D-38)
OPEN(UNIT=5,FILE='P3uptakeNH4.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (no3uptakeP(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='P3uptakePO4.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (vpo4_p3(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='P3uptakeDIC.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (vdic_p3(J),J=1,nz+4)
CLOSE(5)

!also record diffusion of nitrate:
    do j=1,nz ; jc=j+2;
        call mydiff(no3,Kz,j,dz,nz,diff)
            no3uptakeP(jc)=diff
    end do
OPEN(UNIT=5,FILE='kno3_diff.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (no3uptakeP(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='wd.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (wd(J),J=1,nz+1)
CLOSE(5)

OPEN(UNIT=5,FILE='kz.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (kz(J),J=1,nz+1)
CLOSE(5)

OPEN(UNIT=5,FILE='Iz.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (Iz(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='nh4_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (nh4(J),J=1,nz+4)
CLOSE(5)
	
OPEN(UNIT=5,FILE='no2_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (no2(J),J=1,nz+4)
CLOSE(5)
	
OPEN(UNIT=5,FILE='no3_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (no3(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='dic_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (dic(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='po4_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (po4(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='dn_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (dn(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='don_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO I=1,ndistr
WRITE(5,*) (don(J,I),J=1,nz+4)
END DO
CLOSE(5)

OPEN(UNIT=5,FILE='dc_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (dc(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='doc_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO I=1,ndistr
WRITE(5,*) (doc(J,I),J=1,nz+4)
END DO
CLOSE(5)

OPEN(UNIT=5,FILE='dp_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (dp(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='dop_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO I=1,ndistr
WRITE(5,*) (dop(J,I),J=1,nz+4)
END DO
CLOSE(5)

OPEN(UNIT=5,FILE='o_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (o(J),J=1,nz+4)
CLOSE(5)

!OPEN(UNIT=5,FILE='bo_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
!WRITE(5,*) (nbo(J),J=1,nz+4)
!CLOSE(5)

OPEN(UNIT=5,FILE='nbo_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (nbo(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='cbo_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (cbo(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='pbo_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (pbo(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='xbo_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (xbo(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='nball_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO I=1,ndistr
WRITE(5,*) (nball(J,I),J=1,nz+4)
END DO
CLOSE(5)

OPEN(UNIT=5,FILE='cball_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO I=1,ndistr
WRITE(5,*) (cball(J,I),J=1,nz+4)
END DO
CLOSE(5)

OPEN(UNIT=5,FILE='pball_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO I=1,ndistr
WRITE(5,*) (pball(J,I),J=1,nz+4)
END DO
CLOSE(5)

OPEN(UNIT=5,FILE='xball_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO I=1,ndistr
WRITE(5,*) (xball(J,I),J=1,nz+4)
END DO
CLOSE(5)

OPEN(UNIT=5,FILE='ubo_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (u_bo(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='uball_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO I=1,ndistr
WRITE(5,*) (u_ball(J,I),J=1,nz+4)
END DO
CLOSE(5)

OPEN(UNIT=5,FILE='np2_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (np2(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='cp2_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (cp2(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='pp2_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (pp2(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='xp2_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (xp2(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='np3_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (np3(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='cp3_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (cp3(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='pp3_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (pp3(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='xp3_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (xp3(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='ubnh4_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (u_bnh4(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='ubno2_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (u_bno2(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='up2_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (u_p2(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='up3_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (u_p3(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='bnh4_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (bnh4(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='bno2_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (bno2(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='zoo_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (zoo(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='zoo2_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (zoo2(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='zoo3_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (zoo3(J),J=1,nz+4)
CLOSE(5)

!bact yield and excretion r
OPEN(UNIT=5,FILE='yc_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (yc_bo(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='yn_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (yn_bo(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='yp_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (yp_bo(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='rc_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (rc_bo(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='rn_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (rn_bo(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='rp_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (rp_bo(J),J=1,nz+4)
CLOSE(5)

!bact DOM yield and excretion r
OPEN(UNIT=5,FILE='yc_all_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO I=1,ndistr 
WRITE(5,*) (yc_ball(J,I),J=1,nz+4)
END DO
CLOSE(5)

OPEN(UNIT=5,FILE='yn_all_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO I=1,ndistr 
WRITE(5,*) (yn_ball(J,I),J=1,nz+4)
END DO
CLOSE(5)

OPEN(UNIT=5,FILE='yp_all_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO I=1,ndistr 
WRITE(5,*) (yp_ball(J,I),J=1,nz+4)
END DO
CLOSE(5)

OPEN(UNIT=5,FILE='rc_all_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO I=1,ndistr 
WRITE(5,*) (rc_ball(J,I),J=1,nz+4)
END DO
CLOSE(5)

OPEN(UNIT=5,FILE='rn_all_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO I=1,ndistr 
WRITE(5,*) (rn_ball(J,I),J=1,nz+4)
END DO
CLOSE(5)

OPEN(UNIT=5,FILE='rp_all_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO I=1,ndistr 
WRITE(5,*) (rp_ball(J,I),J=1,nz+4)
END DO
CLOSE(5)

!pp yield and excretion r
OPEN(UNIT=5,FILE='yc_p3_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (yc_p3(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='yn_p3_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (yn_p3(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='yp_p3_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (yp_p3(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='rc_p3_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (rc_p3(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='rn_p3_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (rn_p3(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='rp_p3_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (rp_p3(J),J=1,nz+4)
CLOSE(5)

!bact uptake (pp uptake above)
OPEN(UNIT=5,FILE='vnh4_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (vnh4_bo(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='vpo4_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (vpo4_bo(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='vdpoc_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (vdpoc_bo(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='vdpon_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (vdpon_bo(J),J=1,nz+4)
CLOSE(5)

OPEN(UNIT=5,FILE='vdpop_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (vdpop_bo(J),J=1,nz+4)
CLOSE(5)

!bact DOM uptake
OPEN(UNIT=5,FILE='vnh4_all_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO I=1,ndistr
WRITE(5,*) (vnh4_ball(J,I),J=1,nz+4)
END DO
CLOSE(5)

OPEN(UNIT=5,FILE='vpo4_all_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO I=1,ndistr
WRITE(5,*) (vpo4_ball(J,I),J=1,nz+4)
END DO
CLOSE(5)

OPEN(UNIT=5,FILE='vdpoc_all_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO I=1,ndistr
WRITE(5,*) (vdpoc_ball(J,I),J=1,nz+4)
END DO
CLOSE(5)

OPEN(UNIT=5,FILE='vdpon_all_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO I=1,ndistr
WRITE(5,*) (vdpon_ball(J,I),J=1,nz+4)
END DO
CLOSE(5)

OPEN(UNIT=5,FILE='vdpop_all_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO I=1,ndistr
WRITE(5,*) (vdpop_ball(J,I),J=1,nz+4)
END DO
CLOSE(5)

!sources of DON:
!Vmaxall_w(I)/sum(Vmaxall_w)*( &
no3uptakeP = (alphaI-1D0)*vdpon_bo*xbo & !sink: 1 heterotroph
            + rn_p3*xp3 & !excretion of DOC by pp
		    + mortf*mortn

OPEN(UNIT=5,FILE='don_source_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (no3uptakeP(J),J=1,nz+4)
CLOSE(5)

!sources of DOC:
!Vmaxall_w(I)/sum(Vmaxall_w)*( &
no3uptakeP = (alphaI-1D0)*vdpoc_bo*xbo & !sink: 1 heterotroph
            + rc_p3*xp3 & !excretion of DOC by pp
		    + mortf*mortc

OPEN(UNIT=5,FILE='doc_source_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (no3uptakeP(J),J=1,nz+4)
CLOSE(5)

!sources of DOP:
!Vmaxall_w(I)/sum(Vmaxall_w)*( &
no3uptakeP = (alphaI-1D0)*vdpop_bo*xbo & !sink: 1 heterotroph
            + rp_p3*xp3 & !excretion of DOC by pp
		    + mortf*mortp

OPEN(UNIT=5,FILE='dop_source_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
WRITE(5,*) (no3uptakeP(J),J=1,nz+4)
CLOSE(5)

!a few others:
OPEN(UNIT=5,FILE='time_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO J=1,ind
WRITE(5,*) (time(J))
END DO
CLOSE(5)

OPEN(UNIT=5,FILE='z_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO I=1,nz
WRITE(5,*) (zm(I))
END DO
CLOSE(5)

OPEN(UNIT=5,FILE='sumall_f.txt',ACCESS='SEQUENTIAL',BLANK='ZERO')
DO I=1,ind
WRITE(5,*) (sumall(I,J),J=1,35)
END DO
CLOSE(5)

	end if  !end the mod

!END LOOP

end do !!end time loop

print*,'Total CPU time in seconds:'
call CPU_TIME(cputime)
print*,cputime


contains
SUBROUTINE MYQUICK(C,w,j,dz,nz,adv)
implicit none
REAL*8 :: C(nz+4),w(nz+1),adv
REAL*8 :: wp1,wn1,wp,wn,Dy1,Dy2,Dyn1,Fu,Fd
INTEGER :: j,nz,dz
INTEGER :: jc

jc=j+2

        !at top face:
        wp1=(w(j+1)+abs(w(j+1)))/2D0;
        wn1=(w(j+1)-abs(w(j+1)))/2D0;
        !at bottom face:
        wp=(w(j)+abs(w(j)))/2D0;
        wn=(w(j)-abs(w(j)))/2D0;
          
        Dy1=C(jc+2)-2D0*C(jc+1)+C(jc);
        Dy2=C(jc+1)-2D0*C(jc)+C(jc-1);
        Dyn1=C(jc)-2D0*C(jc-1)+C(jc-2);

        Fu=w(j+1)/2D0*(C(jc)+C(jc+1)) - wp1/8D0*Dy2 - wn1/8D0*Dy1;
        Fd=w(j)/2D0*(C(jc-1)+C(jc)) - wp/8D0*Dyn1 - wn/8D0*Dy2;
                
		adv=(Fu-Fd)/dz;  
        
END SUBROUTINE MYQUICK

SUBROUTINE MYDIFF(C,Kz,j,dz,nz,diff)
implicit none
REAL*8 :: C(nz+4),Kz(nz+1),diff
REAL*8 :: Fu,Fd
INTEGER :: j,nz,dz
INTEGER :: jc

jc=j+2
        
        Fu=Kz(j+1)*(C(jc+1)-C(jc))/dz;
        Fd=Kz(j)*(C(jc)-C(jc-1))/dz;
               
        diff=(Fu-Fd)/dz;
        
END SUBROUTINE MYDIFF
                
                !inorganics
SUBROUTINE MYRK(nh4_one,knh4_two,nh4_two, &
                no2_one,kno2_two,no2_two, &
                no3_one,kno3_two,no3_two, &
                po4_one,kpo4_two,po4_two, &
                dic_one,kdic_two,dic_two, &
                o_one,ko_two,o_two, &
                !organics
                dn_one,kdn_two,dn_two, &
                don_one,kdon_two,don_two, &
                dp_one,kdp_two,dp_two, &
                dop_one,kdop_two,dop_two, &
                dc_one,kdc_two,dc_two, &
                doc_one,kdoc_two,doc_two, &
                !het bact:POM
                xbo_one,kxbo_two,xbo_two, &
                nbo_one,knbo_two,nbo_two, &
                pbo_one,kpbo_two,pbo_two, &
                cbo_one,kcbo_two,cbo_two, &
                !het bact all:DOM
                xball_one,kxball_two,xball_two, &
                nball_one,knball_two,nball_two, &
                pball_one,kpball_two,pball_two, &
                cball_one,kcball_two,cball_two, &
                !pp 3 (Pro-like)
                xp3_one,kxp3_two,xp3_two, & 
                np3_one,knp3_two,np3_two, &
                pp3_one,kpp3_two,pp3_two, &
                cp3_one,kcp3_two,cp3_two, &
                !pp 2 (Diatom-like)
                xp2_one,kxp2_two,xp2_two, & 
                np2_one,knp2_two,np2_two, &
                pp2_one,kpp2_two,pp2_two, &
                cp2_one,kcp2_two,cp2_two, &
                !nitrifiers
                bnh4_one,kbnh4_two,bnh4_two, &
                bno2_one,kbno2_two,bno2_two, &
                !zoopl
                zoo_one,kzoo_two,zoo_two, &
                zoo2_one,kzoo2_two,zoo2_two, &
                zoo3_one,kzoo3_two,zoo3_two)
                !ignoring:
                !xp1
                !bo_one,kbo_two,bo_two, &
                !bo_pa_one,kbo_pa_two,bo_pa_two, &
				
implicit none
REAL*8, dimension(nz+4), intent(in) :: &
                nh4_one,no2_one,no3_one, &
                po4_one,dic_one,o_one, &
                dn_one,dp_one,dc_one, &
                xbo_one,nbo_one,pbo_one,cbo_one, &
                xp3_one,np3_one,pp3_one,cp3_one, &
                xp2_one,np2_one,pp2_one,cp2_one, &
                bnh4_one,bno2_one, &
                zoo_one,zoo2_one,zoo3_one
REAL*8, dimension(nz+4,ndistr), intent(in) :: &
                xball_one,nball_one,pball_one,cball_one, &
                don_one,dop_one,doc_one
REAL*8, dimension(nz+4), intent(out) :: &
                knh4_two,kno2_two,kno3_two, &
                kpo4_two,kdic_two,ko_two, &
                kdn_two,kdp_two,kdc_two, &
                kxbo_two,knbo_two,kpbo_two,kcbo_two, &
                kxp3_two,knp3_two,kpp3_two,kcp3_two, &
                kxp2_two,knp2_two,kpp2_two,kcp2_two, &
                kbnh4_two,kbno2_two, &
                kzoo_two,kzoo2_two,kzoo3_two, &
                !
                nh4_two,no2_two,no3_two, &
                po4_two,dic_two,o_two, &
                dn_two,dp_two,dc_two, &
                xbo_two,nbo_two,pbo_two,cbo_two, &
                xp3_two,np3_two,pp3_two,cp3_two, &
                xp2_two,np2_two,pp2_two,cp2_two, &
                bnh4_two,bno2_two, &
                zoo_two,zoo2_two,zoo3_two
REAL*8, dimension(nz+4,ndistr), intent(out) :: &
                kdon_two,kdop_two,kdoc_two, &
                kxball_two,knball_two,kpball_two,kcball_two, &
                xball_two,nball_two,pball_two,cball_two, &
                don_two,dop_two,doc_two

    do j=1,nz ; jc=j+2;       
    	    call mydiff(nh4_one,Kz,j,dz,nz,diff)
			knh4_two(jc)=diff
			call mydiff(no2_one,Kz,j,dz,nz,diff)
			kno2_two(jc)=diff
			call mydiff(no3_one,Kz,j,dz,nz,diff)
            kno3_two(jc)=diff
			call mydiff(dic_one,Kz,j,dz,nz,diff)
            kdic_two(jc)=diff
			call mydiff(po4_one,Kz,j,dz,nz,diff)
            kpo4_two(jc)=diff
        	call mydiff(o_one,KzO,j,dz,nz,diff)
        	ko_two(jc)=diff
			!POM:
        	call myquick(dn_one,wd,j,dz,nz,adv)
        	call mydiff(dn_one,Kz,j,dz,nz,diff)
        	kdn_two(jc)=-adv+diff
        	call myquick(dc_one,wd,j,dz,nz,adv)
        	call mydiff(dc_one,Kz,j,dz,nz,diff)
        	kdc_two(jc)=-adv+diff
        	call myquick(dp_one,wd,j,dz,nz,adv)
        	call mydiff(dp_one,Kz,j,dz,nz,diff)
        	kdp_two(jc)=-adv+diff
        	!het bact: POM
            call mydiff(xbo_one,Kz,j,dz,nz,diff)
			kxbo_two(jc)=diff
			call mydiff(nbo_one,Kz,j,dz,nz,diff)
			knbo_two(jc)=diff
			call mydiff(cbo_one,Kz,j,dz,nz,diff)
			kcbo_two(jc)=diff
			call mydiff(pbo_one,Kz,j,dz,nz,diff)
			kpbo_two(jc)=diff
			!
            call mydiff(xp3_one,Kz,j,dz,nz,diff)
			kxp3_two(jc)=diff
			call mydiff(np3_one,Kz,j,dz,nz,diff)
			knp3_two(jc)=diff
			call mydiff(cp3_one,Kz,j,dz,nz,diff)
			kcp3_two(jc)=diff
			call mydiff(pp3_one,Kz,j,dz,nz,diff) 
			kpp3_two(jc)=diff
        	!
            if (twop.eq.1) then
                call mydiff(xp2_one,Kz,j,dz,nz,diff)
			    kxp2_two(jc)=diff
			    call mydiff(np2_one,Kz,j,dz,nz,diff)
			    knp2_two(jc)=diff
			    call mydiff(cp2_one,Kz,j,dz,nz,diff)
			    kcp2_two(jc)=diff
			    call mydiff(pp2_one,Kz,j,dz,nz,diff)
			    kpp2_two(jc)=diff
            end if
			!
            call mydiff(bnh4_one,Kz,j,dz,nz,diff)
        	kbnh4_two(jc)=diff
        	call mydiff(bno2_one,Kz,j,dz,nz,diff)
        	kbno2_two(jc)=diff
            !
        	!call mydiff(zoo_one,Kz,j,dz,nz,diff)
            !kzoo_two(jc)=diff
        	!call mydiff(zoo2_one,Kz,j,dz,nz,diff)
        	!kzoo2_two(jc)=diff
        	!call mydiff(zoo3_one,Kz,j,dz,nz,diff)
        	!kzoo3_two(jc)=diff
            !ndistr arrays:
            DO I=1,ndistr
                !Het Bact
                call mydiff(xball_one(:,I),Kz,j,dz,nz,diff)
			    kxball_two(jc,I)=diff
			    call mydiff(nball_one(:,I),Kz,j,dz,nz,diff)
			    knball_two(jc,I)=diff
			    call mydiff(cball_one(:,I),Kz,j,dz,nz,diff)
			    kcball_two(jc,I)=diff
			    call mydiff(pball_one(:,I),Kz,j,dz,nz,diff)
			    kpball_two(jc,I)=diff
			    !DOM:
                call myquick(don_one(:,I),wd2,j,dz,nz,adv)
        	    call mydiff(don_one(:,I),Kz,j,dz,nz,diff)
        	    kdon_two(jc,I)=-adv+diff
                call myquick(doc_one(:,I),wd2,j,dz,nz,adv)
        	    call mydiff(doc_one(:,I),Kz,j,dz,nz,diff)
        	    kdoc_two(jc,I)=-adv+diff
                call myquick(dop_one(:,I),wd2,j,dz,nz,adv)
        	    call mydiff(dop_one(:,I),Kz,j,dz,nz,diff)
        	    kdop_two(jc,I)=-adv+diff
            END DO

end do

!BEGIN RK BIO

!NOTE: see code in Distr_Exp to redistribute buried POM if using multiple (slow) pools of sinking POM. for now (sept 22 2018), I just have one pool of POM, and multiple pools of non-sinking DOM

pt=np2_one+np3_one
!
btsq_nobo=bnh4_one**2+bno2_one**2
ptsq=np2_one**2+np3_one**2

!oxygen uptake
vo=po_coef*o_one*TempFun

!!ratios of dom to pom
!donf = don_one/(don_one + dn_one + 1D-38)
!docf = doc_one/(doc_one + dc_one + 1D-38)
!dopf = dop_one/(dop_one + dp_one + 1D-38)

!HET BACT: POM consuming

!quotas:
Qn_bo = nbo_one/xbo_one
Qp_bo = pbo_one/xbo_one
Qc_bo = cbo_one/xbo_one

Qn_bo(nz+3:nz+4)=0D0
Qn_bo(1:2)=0D0
Qp_bo(nz+3:nz+4)=0D0
Qp_bo(1:2)=0D0
Qc_bo(nz+3:nz+4)=0D0
Qc_bo(1:2)=0D0

!max quotas
Qnlim = 1D0!(Qmaxn - Qn_bo)/(Qmaxn - Qminn)
Qplim = 1D0!(Qmaxp - Qp_bo)/(Qmaxp - Qminp)
Qclim = 1D0!(Qmaxc - Qc_bo)/(Qmaxc - Qminc)

!these are actual uptake rates, not specific uptake, hence multiplying by Qmin
vdpon_bo = pd_max*Qminn*Qnlim*(dn_one)/(dn_one+kdn)*TempFun
vdpoc_bo = pd_max*Qminc*Qclim*(dc_one)/(dc_one+kdn*Rb_CN)*TempFun
vdpop_bo = pd_max*Qminp*Qplim*(dp_one)/(dp_one+kdn*Rb_PN)*TempFun

!vnh4max = pn_maxL*Qminn*Qnlim*nh4_one/(nh4_one+knL_nh4)*TempFun
ntot = nh4_one+no2_one+no3_one
vnh4max = 0D0!pn_maxL*Qminn*Qnlim*ntot/(ntot+knL_nox)*TempFun
vpo4max = 0D0!pp_maxL*Qminp*Qplim*po4_one/(po4_one+kpL)*TempFun

!vnh4_bo = MIN(MAX((vdpoc_bo*yd_bo/Rb_CN - vdpon_bo),0D0),vnh4max) 
!vpo4_bo = MIN(MAX((vdpoc_bo*yd_bo/Rb_CN*Rb_PN - vdpop_bo),0D0),vpo4max) 
vnh4_bo = MIN(MAX((vdpoc_bo/Rb_CN - vdpon_bo),0D0),vnh4max) 
vpo4_bo = MIN(MAX((vdpoc_bo/Rb_CN*Rb_PN - vdpop_bo),0D0),vpo4max) 

vnh4_bo(nz+3:nz+4)=0D0
vnh4_bo(1:2)=0D0
vpo4_bo(nz+3:nz+4)=0D0
vpo4_bo(1:2)=0D0

qlim = MIN( (Qn_bo - Qminn)/Qn_bo, &
            (Qc_bo - Qminc)/Qc_bo, &
            (Qp_bo - Qminp)/Qp_bo )
qlim = MAX(0D0,qlim)

u_bo = MIN(pd_max*qlim*TempFun,vo*yo_bo)
u_bo(nz+3:nz+4)=0D0
u_bo(1:2)=0D0

!Respiration following Thingstad
rc_bo = MAX(0D0,prB*(Qc_bo - Qminc/(1D0-qlim)))*TempFun + (1D0-yd_bo)*vdpoc_bo
rn_bo = MAX(0D0,prB*(Qn_bo - Qminn/(1D0-qlim)))*TempFun
rp_bo = MAX(0D0,prB*(Qp_bo - Qminp/(1D0-qlim)))*TempFun

yc_bo = 1D0 - rc_bo/vdpoc_bo
yn_bo = 1D0 - rn_bo/(vdpon_bo + vnh4_bo) 
yp_bo = 1D0 - rp_bo/(vdpop_bo + vpo4_bo)

!Multiple HET BACT: DOM consuming:

DO I=1,ndistr

!quotas
Qn_ball(:,I) = nball_one(:,I)/xball_one(:,I)
Qp_ball(:,I) = pball_one(:,I)/xball_one(:,I)
Qc_ball(:,I) = cball_one(:,I)/xball_one(:,I)

Qn_ball(nz+3:nz+4,I)=0D0
Qn_ball(1:2,I)=0D0
Qp_ball(nz+3:nz+4,I)=0D0
Qp_ball(1:2,I)=0D0
Qc_ball(nz+3:nz+4,I)=0D0
Qc_ball(1:2,I)=0D0

!max quotas:
Qnlim = 1D0!(Qmaxn - Qn_ball(:,I))/(Qmaxn - Qminn)
Qplim = 1D0!(Qmaxp - Qp_ball(:,I))/(Qmaxp - Qminp)
Qclim = 1D0!(Qmaxc - Qc_ball(:,I))/(Qmaxc - Qminc)

!these are actual uptake rates, not specific uptake, hence multiplying by Qmin
vdpon_ball(:,I) = Vmaxall(I)*Qminn*Qnlim*don_one(:,I)/(don_one(:,I)+kdnall(I))*TempFun
vdpoc_ball(:,I) = Vmaxall(I)*Qminc*Qclim*doc_one(:,I)/(doc_one(:,I)+kdnall(I)*Rb_CN)*TempFun
vdpop_ball(:,I) = Vmaxall(I)*Qminp*Qplim*dop_one(:,I)/(dop_one(:,I)+kdnall(I)*Rb_PN)*TempFun

vnh4max = pn_maxL*Qminn*Qnlim*ntot/(ntot+knL_nox)*TempFun
vpo4max = pp_maxL*Qminp*Qplim*po4_one/(po4_one+kpL)*TempFun

!vnh4_ball(:,I) = MIN(MAX((vdpoc_ball(:,I)*yd_ball(I)/Rb_CN - vdpon_ball(:,I)),0D0),vnh4max) 
!vpo4_ball(:,I) = MIN(MAX((vdpoc_ball(:,I)*yd_ball(I)/Rb_CN*Rb_PN - vdpop_ball(:,I)),0D0),vpo4max) 
vnh4_ball(:,I) = MIN(MAX((vdpoc_ball(:,I)/Rb_CN - vdpon_ball(:,I)),0D0),vnh4max) 
vpo4_ball(:,I) = MIN(MAX((vdpoc_ball(:,I)/Rb_CN*Rb_PN - vdpop_ball(:,I)),0D0),vpo4max) 

vnh4_ball(nz+3:nz+4,I)=0D0
vnh4_ball(1:2,I)=0D0
vpo4_ball(nz+3:nz+4,I)=0D0
vpo4_ball(1:2,I)=0D0

qlim = MIN( (Qn_ball(:,I) - Qminn)/Qn_ball(:,I), &
            (Qc_ball(:,I) - Qminc)/Qc_ball(:,I), &
            (Qp_ball(:,I) - Qminp)/Qp_ball(:,I) )
qlim = MAX(0D0,qlim)

!u_ball(:,I) = MIN(Vmaxall(I)*qlim*TempFun,vo*yo_ball(I))
u_ball(:,I) = MIN(1D0*qlim*TempFun,vo*yo_ball(I))
u_ball(nz+3:nz+4,I)=0D0
u_ball(1:2,I)=0D0

!Respiration following Thingstad
rc_ball(:,I) = MAX(0D0,prB*(Qc_ball(:,I) - Qminc/(1D0-qlim)))*TempFun + (1D0-yd_ball(I))*vdpoc_ball(:,I)
rn_ball(:,I) = MAX(0D0,prB*(Qn_ball(:,I) - Qminn/(1D0-qlim)))*TempFun
rp_ball(:,I) = MAX(0D0,prB*(Qp_ball(:,I) - Qminp/(1D0-qlim)))*TempFun

yc_ball(:,I) = 1D0 - rc_ball(:,I)/vdpoc_ball(:,I) !NOTE: need to change in the 1B model
yn_ball(:,I) = 1D0 - rn_ball(:,I)/vdpon_ball(:,I)! + vnh4_ball) 
yp_ball(:,I) = 1D0 - rp_ball(:,I)/vdpop_ball(:,I)! + vpo4_ball)

END DO

!NITRIFIERS

!MM uptake:
vnh4_bnh4=pn_max*(nh4_one/(nh4_one+kn))*TempFun
vno2_bno2=pn_max*(no2_one/(no2_one+kn))*TempFun

!nitrifier growth rates:

u_bnh4=min(vnh4_bnh4*ynh4_bnh4,vo*yo_bnh4)
u_bno2=min(vno2_bno2*yno2_bno2,vo*yo_bno2)

!PHYTOPLANKTON

!quotas:
Qn_p3 = np3_one/xp3_one
Qp_p3 = pp3_one/xp3_one
Qc_p3 = cp3_one/xp3_one

Qn_p3(nz+3:nz+4)=0D0
Qn_p3(1:2)=0D0
Qp_p3(nz+3:nz+4)=0D0
Qp_p3(1:2)=0D0
Qc_p3(nz+3:nz+4)=0D0
Qc_p3(1:2)=0D0

!max quotas
Qnlim = (Qmaxn - Qn_p3)/(Qmaxn - Qminn)
Qplim = (Qmaxp - Qp_p3)/(Qmaxp - Qminp)
Qclim = (Qmaxc - Qc_p3)/(Qmaxc - Qminc)

inhibnh4 = exp(-amminhib*nh4_one) !from GUD

!older simpler light limitation:
!vdic_p3 = umaxp3*Qminc*Iz/(Iz+kI)*TempFun
!add dic limitation with kcL, though dic should always be very high so really is unnecessary
!vdic_p3 = pc_maxL*Qminc*Iz/(Iz+kI)*Qclim*dic_one/(dic_one+kcL)*TempFun
!vdic_p3 = pc_maxL*Qminc*Iz/(Iz+kI)*Qclim*TempFun
vdic_p3 = pc_maxL*Qminc*Qclim*TempFun

!add light limitation to inorg nutrient assimilation (technically, they may be taken up but not assimilated)
!vnh4max_bo = pn_maxL*Qminn*nh4_one/(nh4_one+knL_nh4)*TempFun
!vpo4max_bo = pp_maxL*Qminp*po4_one/(po4_one+kpL)*TempFun
!vnh4_p3=pn_maxL*Qminn*Iz/(Iz+kI)*Qnlim*nh4_one/(nh4_one+knL_nh4)*TempFun
!vno2_p3=pn_maxL*Qminn*Iz/(Iz+kI)*Qnlim*no2_one/(no2_one+knL_nox)*inhibnh4*TempFun
!vno3_p3=pn_maxL*Qminn*Iz/(Iz+kI)*Qnlim*no3_one/(no3_one+knL_nox)*inhibnh4*TempFun
!vpo4_p3=pp_maxL*Qminp*Iz/(Iz+kI)*Qplim*po4_one/(po4_one+kpL)*TempFun
vnh4_p3=pn_maxL*Qminn*Qnlim*nh4_one/(nh4_one+knL_nh4)*TempFun
vno2_p3=pn_maxL*Qminn*Qnlim*no2_one/(no2_one+knL_nox)*inhibnh4*TempFun
vno3_p3=pn_maxL*Qminn*Qnlim*no3_one/(no3_one+knL_nox)*inhibnh4*TempFun
vpo4_p3=pp_maxL*Qminp*Qplim*po4_one/(po4_one+kpL)*TempFun
!(light-limited):vdic_p3=umaxp3*Qminc*TempFun !as in 0D matlab model

if (twop.eq.1) then
    vnh4_p2=pn_maxL*Qminn*nh4_one/(nh4_one+knL_nh4)*TempFun
    vno2_p2=pn_maxL*Qminn*no2_one/(no2_one+knL_nox)*inhibnh4*TempFun
    vno3_p2=pn_maxL*Qminn*no3_one/(no3_one+knL_nox)*inhibnh4*TempFun
    vpo4_p2=pp_maxL*Qminp*po4_one/(po4_one+kpL)*TempFun
    !vdic_p2=umaxp2*Qminc*TempFun !as in 0D matlab model
end if

!nutrient-limited growth rate:
qlim = MIN( (Qn_p3 - Qminn)/Qn_p3, &
            (Qc_p3 - Qminc)/Qc_p3, &
            (Qp_p3 - Qminp)/Qp_p3)
qlim = MAX(0D0,qlim)
!PCmax3 = umaxp3*TempFun*min(1D0,nlimtot,limpo4)
!PCmax3 = umaxp3*qlim*TempFun !see gud model for Q-based lim, which is similar
u_p3 = umaxp3*qlim*Iz/(Iz+kI)*TempFun !is this right to put the light-limited part here??
u_p3(nz+3:nz+4)=0D0
u_p3(1:2)=0D0


!LIGHT LIMITATION
!!light-limited growth rate: !to record only the light effect on mu_p:
!PCmaxlight3 = umaxp3*TempFun
!chl2c_p3 = max(chl2cmin, &
!    min(chl2cmax, chl2cmax/(1D0+chl2cmax*a_Ip3/2D0/PCmaxlight3)))
!PClight3 = PCmaxlight3*(1D0 - exp(-a_Ip3*chl2c_p3/PCmaxlight3))
!vdic_p3 = PClight3*Qminc
!
!!Geider chlorophyll:c based growth rates:
!a_Ip3 = phimax*a_chlp3*Iz*convI !mmol C/mol Ein * m2/mg chla * Ein/m2/d = mmol C/mg chla/d
!chl2c_p3 = max(chl2cmin, min(chl2cmax, chl2cmax/(1D0+chl2cmax*a_Ip3/2D0/PCmax3)))*inmask
!PC3 = PCmax3*(1D0 - exp(-a_Ip3*chl2c_p3/PCmax3))
!
!PC3(nz+3:nz+4)=0D0
!PC3(1:2)=0D0
!
!u_p3=PC3

!respiration. for p, should this be something smaller than qlim?
rc_p3 = MAX(0D0,prP*(Qc_p3 - Qminc/(1D0-qlim)))*TempFun 
rn_p3 = MAX(0D0,prP*(Qn_p3 - Qminn/(1D0-qlim)))*TempFun
rp_p3 = MAX(0D0,prP*(Qp_p3 - Qminp/(1D0-qlim)))*TempFun
!yields: these look weird for PP -- try in terms of UPTAKE:
!yc_p3 = u_p3*Qc_p3 / (u_p3*Qc_p3 + rc_p3)! + (1D0-yd_bo)*vdpoc_bo)
!yn_p3 = u_p3*Qn_p3 / (u_p3*Qn_p3 + rn_p3)
!yp_p3 = u_p3*Qp_p3 / (u_p3*Qp_p3 + rp_p3)
yc_p3 = 1D0 - rc_p3/vdic_p3
yn_p3 = 1D0 - rn_p3/(vnh4_p3+vno2_p3+vno3_p3)
yp_p3 = 1D0 - rp_p3/vpo4_p3

!p2:
if (twop.eq.1) then
Qn_p2 = np2_one/xp2_one
Qp_p2 = pp2_one/xp2_one
Qc_p2 = cp2_one/xp2_one

Qn_p2(nz+3:nz+4)=0D0
Qn_p2(1:2)=0D0
Qp_p2(nz+3:nz+4)=0D0
Qp_p2(1:2)=0D0
Qc_p2(nz+3:nz+4)=0D0
Qc_p2(1:2)=0D0

!i haven't yet converted p2 to the above simpler light limitation-sep 2018
qlim = MIN( (Qn_p2 - Qminn)/Qn_p2, &
            (Qc_p2 - Qminc)/Qc_p2, &
            (Qp_p2 - Qminp)/Qp_p2)
qlim = MAX(0D0,qlim)
PCmax2 = umaxp2*qlim*TempFun

!Geider chlorophyll:c based growth rates:
a_Ip2 = phimax*a_chlp2*Iz*convI !mmol C/mol Ein * m2/mg chla * Ein/m2/d = mmol C/mg chla/d
chl2c_p2 = max(chl2cmin, min(chl2cmax, chl2cmax/(1D0+chl2cmax*a_Ip2/2D0/PCmax2)))*inmask
PC2 = PCmax2*(1D0 - exp(-a_Ip2*chl2c_p2/PCmax2))

PC2(nz+3:nz+4)=0D0
PC2(1:2)=0D0

u_p2=PC2

!respiration. for p, should this be something smaller than qlim?
rc_p2 = MAX(0D0,prP*(Qc_p2 - Qminc/(1D0-qlim)))*TempFun 
rn_p2 = MAX(0D0,prP*(Qn_p2 - Qminn/(1D0-qlim)))*TempFun
rp_p2 = MAX(0D0,prP*(Qp_p2 - Qminp/(1D0-qlim)))*TempFun

end if

!TOTALS:
!totals for grazing and mortality, n-based bact biomass is now "nbo" instead of "bo"
!sept 22: NOT using bt or btsq right now, so zero out:
bt(:) = 0D0
btsq(:) = 0D0
mlinBnballt(:) = 0D0
mlinBcballt(:) = 0D0
mlinBpballt(:) = 0D0
nballtsq(:) = 0D0
cnballtsq(:) = 0D0
pnballtsq(:) = 0D0
!bt=nbo_one+bnh4_one+bno2_one
!btsq=nbo_one**2+bnh4_one**2+bno2_one**2
   DO I=1,ndistr
        mlinBnballt = mlinBnballt+mlinBall(I)*nball_one(:,I)
        mlinBcballt = mlinBcballt+mlinBall(I)*cball_one(:,I)
        mlinBpballt = mlinBpballt+mlinBall(I)*pball_one(:,I)
        nballtsq = nballtsq+nball_one(:,I)*nball_one(:,I)
        cnballtsq = cnballtsq+nball_one(:,I)*nball_one(:,I)*Qc_ball(:,I)/Qn_ball(:,I)
        pnballtsq = pnballtsq+nball_one(:,I)*nball_one(:,I)*Qp_ball(:,I)/Qn_ball(:,I)
   END DO
cnballtsq(1:2)=0D0
cnballtsq(nz+3:nz+4)=0D0
pnballtsq(1:2)=0D0
pnballtsq(nz+3:nz+4)=0D0

!GRAZING (gmax set to 0)
g=gmax*bt/(bt+kg)*TempFun !for zoo
g2=gmax*np2_one/(np2_one+kg)*TempFun !for zoo2
g3=gmax*np3_one/(np3_one+kg)*TempFun !for zoo3 (goal: ONLY this one)

!total up mortality
mortn = (mlinB*nbo_one &
        + mquad*nbo_one*nbo_one &
        + mlinp3*np3_one &
        + mquad*np3_one*np3_one &
        + mlinBnballt & !mlinBall(I) incorporated above
        + mquad*nballtsq & 
        !+ mlinp2*np2_one &
        !+ mquad*np2_one*np2_one) &
        + mlinA*bnh4_one &
        + mlinN*bno2_one &
        + mquad*btsq_nobo &
        + mz*zoo_one*zoo_one &!quadratic
        + mz*zoo2_one*zoo2_one &
        + mz*zoo3_one*zoo3_one)*TempFun 
    
mortc = (mlinB*cbo_one &
		+ mquad*nbo_one*nbo_one*Qc_bo/Qn_bo &
		+ mlinp3*cp3_one &
		+ mquad*np3_one*np3_one*Qc_p3/Qn_p3 &
        + mlinBcballt & 
		+ mquad*cnballtsq & 
		+ Rb_CN*mlinA*bnh4_one &
		+ Rb_CN*mlinN*bno2_one &
		+ Rb_CN*mquad*btsq_nobo &
		+ Rz_CN*mz*zoo_one*zoo_one &!quadratic
		+ Rz_CN*mz*zoo2_one*zoo2_one &!quadratic
		+ Rz_CN*mz*zoo3_one*zoo3_one)*TempFun !quadratic
mortc(1:2)=0D0
mortc(nz+3:nz+4)=0D0

mortp = (mlinB*pbo_one &
		+ mquad*nbo_one*nbo_one*Qp_bo/Qn_bo &
		+ mlinp3*pp3_one &
		+ mquad*np3_one*np3_one*Qp_p3/Qn_p3 &
        + mlinBpballt & 
		+ mquad*pnballtsq & 
		+ Rb_PN*mlinA*(bnh4_one) &
		+ Rb_PN*mlinN*(bno2_one) &
		+ Rb_PN*mquad*btsq_nobo &
		+ Rz_PN*mz*zoo_one*zoo_one &!quadratic
		+ Rz_PN*mz*zoo2_one*zoo2_one &!quadratic
		+ Rz_PN*mz*zoo3_one*zoo3_one)*TempFun !quadratic
mortp(1:2)=0D0
mortp(nz+3:nz+4)=0D0

!EQUATIONS: NUTRIENTS

!need to add "twop" by adding to terms at end: if onep.. kdic_two = kdic_two - vdic_p2..
!else terms get wonky/crash-sep 2018

kdic_two = kdic_two &
            + rc_bo*xbo_one & !respiration of C
            !now below is in rc_bo:
            !+ (1D0-yd_bo)*vdpoc_bo*xbo_one & !respired portion directly goes out...
			- vdic_p3*xp3_one & 
			!- vdic_p2*xp2_one &
            + Rz_CN*(1D0-gam)*g*zoo_one &  !zoo
            + Rz_CN*(1D0-gam)*g2*zoo2_one  & !zoo2
			+ Rz_CN*(1D0-gam)*g3*zoo3_one &  !zoo
			- Rb_CN*u_bnh4*bnh4_one & !C fixation rate! consumption of C
			- Rb_CN*u_bno2*bno2_one  !C fixation rate!
            !can i just put this into the sum above, in between the pluses? check later
DO I = 1,ndistr
    kdic_two = kdic_two + rc_ball(:,I)*xball_one(:,I)
END DO

kpo4_two = kpo4_two &
            - vpo4_bo*xbo_one & !uptake
            + rp_bo*xbo_one & !respiration of P
            - vpo4_p3*xp3_one & !uptake
            !- vpo4_p2*xp2_one & !uptake
            !do zooplankton pee out PO4?! suppose so.
            + Rz_PN*(1D0-gam)*g*zoo_one &  !zoo
			+ Rz_PN*(1D0-gam)*g2*zoo2_one  & !zoo2
			+ Rz_PN*(1D0-gam)*g3*zoo3_one &  !zoo
            !assume nitrifiers use a bit of PO4 too!! 
            - Rb_PN*u_bnh4*bnh4_one & !consumption: NH4 oxidizer 
			- Rb_PN*u_bno2*bno2_one  !consumption: NH4 oxidizer 
            DO I = 1,ndistr
                kpo4_two = kpo4_two + rp_ball(:,I)*xball_one(:,I) &
                           - vpo4_ball(:,I)*xball_one(:,I)
            END DO

knh4_two = knh4_two &
            - vnh4_bo*xbo_one*nh4_one/(ntot+1D-38) & !uptake
            + rn_bo*xbo_one & !respiration of N
            - vnh4_p3*xp3_one &  !uptake
            !- vnh4_p2*xp2_one & !uptake
            + (1D0-gam)*g*zoo_one &  !zoo
			+ (1D0-gam)*g2*zoo2_one  & !zoo2
			+ (1D0-gam)*g3*zoo3_one &  !zoo
			- 1D0/ynh4_bnh4*u_bnh4*bnh4_one  !consumption: NH4 oxidizer 
            DO I = 1,ndistr
                knh4_two = knh4_two + rn_ball(:,I)*xball_one(:,I) &
                           - vnh4_ball(:,I)*xball_one(:,I)*nh4_one/(ntot+1D-38)
            END DO

kno2_two = kno2_two &
			+ eno2_bnh4*u_bnh4*bnh4_one & !source: NH4 oxidizer 
			- 1D0/yno2_bno2*u_bno2*bno2_one & !sink: aerobic NO2 oxidizer
            - vno2_p3*xp3_one & !uptakei
            - vnh4_bo*xbo_one*no2_one/(ntot+1D-38)  !uptake
            DO I = 1,ndistr
                kno2_two = kno2_two &
                - vnh4_ball(:,I)*xball_one(:,I)*no2_one/(ntot+1D-38)
            END DO
    
            !- vno2_p2*xp2_one &  !uptake
		
kno3_two = kno3_two &
			+ eno3_bno2*u_bno2*bno2_one & !source: aerobic NO2 oxidizer
            - vno3_p3*xp3_one &  !uptake
            !- vno3_p2*xp2_one & !uptake
            - vnh4_bo*xbo_one*no3_one/(ntot+1D-38)  !uptake
	   		DO I = 1,ndistr
                kno3_two = kno3_two &
                - vnh4_ball(:,I)*xball_one(:,I)*no3_one/(ntot+1D-38)
            END DO


!grazing rate for Bhet: g*nbo_one/(bt+1D-38)*Z = 1/d

!N-based quadr mort: mquad*nbo_one**2

!het B: 
knbo_two = knbo_two + vdpon_bo*xbo_one + vnh4_bo*xbo_one - rn_bo*xbo_one &
          - mlinB*nbo_one*TempFun - mquad*nbo_one*nbo_one*TempFun &
          - g*zoo_one*nbo_one/(bt+1D-38)

kcbo_two = kcbo_two + vdpoc_bo*xbo_one - rc_bo*xbo_one & 
          - mlinB*cbo_one*TempFun - mquad*nbo_one*nbo_one*TempFun*Qc_bo/Qn_bo & 
          - g*zoo_one*nbo_one/(bt+1D-38)*Qc_bo/Qn_bo
    kcbo_two(1:2)=0D0
    kcbo_two(nz+3:nz+4)=0D0

kpbo_two = kpbo_two + vdpop_bo*xbo_one + vpo4_bo*xbo_one - rp_bo*xbo_one &
          - mlinB*pbo_one*TempFun - mquad*nbo_one*nbo_one*TempFun*Qp_bo/Qn_bo &
          - g*zoo_one*nbo_one/(bt+1D-38)*Qp_bo/Qn_bo
    kpbo_two(1:2)=0D0
    kpbo_two(nz+3:nz+4)=0D0

kxbo_two = kxbo_two + xbo_one*(u_bo - mlinB*TempFun) &
          - mquad*nbo_one*nbo_one*TempFun/Qn_bo & 
          - g*zoo_one*nbo_one/(bt+1D-38)/Qn_bo 
    kxbo_two(1:2)=0D0
    kxbo_two(nz+3:nz+4)=0D0

!het B: DOM (no grazing -- g is set to 0 above with gmax=0)
DO I=1,ndistr
    knball_two(:,I) = knball_two(:,I) + vdpon_ball(:,I)*xball_one(:,I) &
            + vnh4_ball(:,I)*xball_one(:,I) - rn_ball(:,I)*xball_one(:,I) &
            - mlinBall(I)*nball_one(:,I)*TempFun - mquad*nball_one(:,I)*nball_one(:,I)*TempFun 
    
    kcball_two(:,I) = kcball_two(:,I) + vdpoc_ball(:,I)*xball_one(:,I) &
            - rc_ball(:,I)*xball_one(:,I) & 
            - mlinBall(I)*cball_one(:,I)*TempFun &
            - mquad*nball_one(:,I)*nball_one(:,I)*TempFun*Qc_ball(:,I)/Qn_ball(:,I)  
        kcball_two(1:2,I)=0D0
        kcball_two(nz+3:nz+4,I)=0D0
    
    kpball_two(:,I) = kpball_two(:,I) + vdpop_ball(:,I)*xball_one(:,I) &
            + vpo4_ball(:,I)*xball_one(:,I) - rp_ball(:,I)*xball_one(:,I) &
            - mlinBall(I)*pball_one(:,I)*TempFun &
            - mquad*nball_one(:,I)*nball_one(:,I)*TempFun*Qp_ball(:,I)/Qn_ball(:,I) 
        kpball_two(1:2,I)=0D0
        kpball_two(nz+3:nz+4,I)=0D0
    
    kxball_two(:,I) = kxball_two(:,I) + xball_one(:,I)*(u_ball(:,I) - mlinBall(I)*TempFun) &
            - mquad*nball_one(:,I)*nball_one(:,I)*TempFun/Qn_ball(:,I)  
        kxball_two(1:2,I)=0D0
        kxball_two(nz+3:nz+4,I)=0D0
END DO

!phytopl
!p3
knp3_two = knp3_two + (vnh4_p3+vno2_p3+vno3_p3)*xp3_one - rn_p3*xp3_one &
          - mlinp3*np3_one*TempFun - mquad*np3_one*np3_one*TempFun &
          - g3*zoo3_one

kcp3_two = kcp3_two + vdic_p3*xp3_one - rc_p3*xp3_one &
          - mlinp3*cp3_one*TempFun - mquad*np3_one*np3_one*TempFun*Qc_p3/Qn_p3 &
          - g3*zoo3_one*Qc_p3/Qn_p3
    kcp3_two(1:2)=0D0
    kcp3_two(nz+3:nz+4)=0D0

kpp3_two = kpp3_two + vpo4_p3*xp3_one - rp_p3*xp3_one &
          - mlinp3*pp3_one*TempFun - mquad*np3_one*np3_one*TempFun*Qp_p3/Qn_p3 &
          - g3*zoo3_one*Qp_p3/Qn_p3
    kpp3_two(1:2)=0D0
    kpp3_two(nz+3:nz+4)=0D0

kxp3_two = kxp3_two + xp3_one*(u_p3 - mlinp3*TempFun) &
          - mquad*np3_one*np3_one*TempFun/Qn_p3 & 
          - g3*zoo3_one/Qn_p3 
    kxp3_two(1:2)=0D0
    kxp3_two(nz+3:nz+4)=0D0

!p2
if (twop.eq.1) then
knp2_two = knp2_two + (vnh4_p2+vno2_p2+vno3_p2)*xp2_one - rn_p2*xp2_one &
          - mlinp2*np2_one*TempFun - mquad*np2_one*np2_one*TempFun &
          - g2*zoo2_one

kcp2_two = kcp2_two + vdic_p2*xp2_one - rc_p2*xp2_one &
          - mlinp2*cp2_one*TempFun - mquad*np2_one*np2_one*TempFun*Qc_p2/Qn_p2 &
          - g2*zoo2_one*Qc_p2/Qn_p2
    kcp2_two(1:2)=0D0
    kcp2_two(nz+3:nz+4)=0D0

kpp2_two = kpp2_two + vpo4_p2*xp2_one - rp_p2*xp2_one &
          - mlinp2*pp2_one*TempFun - mquad*np2_one*np2_one*TempFun*Qp_p2/Qn_p2 &
          - g2*zoo2_one*Qp_p2/Qn_p2
    kpp2_two(1:2)=0D0
    kpp2_two(nz+3:nz+4)=0D0

kxp2_two = kxp2_two + xp2_one*(u_p2 - mlinp2*TempFun) &
          - mquad*np2_one*np2_one*TempFun/Qn_p2 & 
          - g2*zoo2_one/Qn_p2 
    kxp2_two(1:2)=0D0
    kxp2_two(nz+3:nz+4)=0D0
end if

!kp2_two = kp2_two + p2_one*(u_p2 - mlinp2*TempFun - mquad*p2_one*TempFun - g2*zoo2_one/(p2_one+1D-38))! - 0D0*g3*zoo3_one/(bt+pt+1D-38))
!kp3_two = kp3_two + p3_one*(u_p3 - mlinp3*TempFun - mquad*p3_one*TempFun - 0D0*g2*zoo2_one/(pt+1D-38) - g3*zoo3_one/(p3_one+1D-38))


!nitrifiers:
kbnh4_two= kbnh4_two +  bnh4_one*(u_bnh4 - mlinA*TempFun - mquad*bnh4_one*TempFun &
           - g*zoo_one/(bt+1D-38)) 
          

kbno2_two= kbno2_two +  bno2_one*(u_bno2 - mlinN*TempFun - mquad*bno2_one*TempFun &
           - g*zoo_one/(bt+1D-38)) 

!!zoopl
!kzoo_two=kzoo_two + gam*g*zoo_one - mz*zoo_one*zoo_one*TempFun
!kzoo2_two=kzoo2_two + gam*g2*zoo2_one - mz*zoo2_one*zoo2_one*TempFun
!kzoo3_two=kzoo3_two + gam*g3*zoo3_one - mz*zoo3_one*zoo3_one*TempFun

!EQUATIONS: ORGANIC MATTER

!if (dommodel.eq.1) then  

kdn_two= kdn_two &
        !- vdpon_bo*xbo_one*(1D0 - donf) & !sink: 1 heterotroph
        - alphaI*vdpon_bo*xbo_one & !sink: 1 heterotroph
		+ (1D0-mortf)*mortn

    kdc_two= kdc_two &
        - alphaI*vdpoc_bo*xbo_one & !sink: 1 heterotroph
		+ (1D0-mortf)*mortc

    kdp_two= kdp_two &
        - alphaI*vdpop_bo*xbo_one & !sink: 1 heterotroph
		+ (1D0-mortf)*mortp

!multiple B:
DO I=1,ndistr
    kdon_two(:,I) = kdon_two(:,I) &
        - vdpon_ball(:,I)*xball_one(:,I) & !sink: 1 heterotroph
        + Vmaxall_w(I)/sum(Vmaxall_w)*( &
            (alphaI-1D0)*vdpon_bo*xbo_one & !sink: 1 heterotroph
            + rn_p3*xp3_one & !excretion of DOC by pp
            !+ rn_p2*xp2_one & !excretion of DOC by pp
		    + mortf*mortn)

    kdoc_two(:,I) = kdoc_two(:,I) &
        - vdpoc_ball(:,I)*xball_one(:,I) & !sink: 1 heterotroph
        + Vmaxall_w(I)/sum(Vmaxall_w)*( &
            (alphaI-1D0)*vdpoc_bo*xbo_one & !sink: 1 heterotroph
            + rc_p3*xp3_one & !excretion of DOC by pp
            !+ rc_p2*xp2_one & !excretion of DOC by pp
		    + mortf*mortc)

    kdop_two(:,I) = kdop_two(:,I) &
        - vdpop_ball(:,I)*xball_one(:,I) & !sink: 1 heterotroph
        + Vmaxall_w(I)/sum(Vmaxall_w)*( &
            (alphaI-1D0)*vdpop_bo*xbo_one & !sink: 1 heterotroph
            + rp_p3*xp3_one & !excretion of DOC by pp
            !+ rp_p2*xp2_one & !excretion of DOC by pp
		    + mortf*mortp)
END DO

!EQUATION: OXYGEN

ko_two = ko_two &
		+ RredO*u_p3*np3_one & !pp production
		!+ RredO*u_p2*np2_one & !pp production
        - RredO*(1D0-gam)*g*zoo_one & !zoo use
		- RredO*(1D0-gam)*g2*zoo2_one & !zoo2 use
		- RredO*(1D0-gam)*g3*zoo3_one & !zoo2 use
		- 1D0/yo_bo*u_bo*nbo_one & !het B use
		- 1D0/yo_bnh4*u_bnh4*bnh4_one & !NH4 oxid use
		- 1D0/yo_bno2*u_bno2*bno2_one & !NO2 oxid use
		+ koverh*(o2sat-o_one)*eqmask & !air-sea
		+ t_o2relax*(o2satdeep-o_one)*inmask  !relaxation at depth (lateral flux)
        DO I = 1,ndistr
            ko_two = ko_two - 1D0/yo_ball(I)*u_ball(:,I)*nball_one(:,I) 
        END DO

!TIMESTEP:

nh4_two = nh4 + dt/2D0*knh4_two; 
no2_two = no2 + dt/2D0*kno2_two; 
no3_two = no3 + dt/2D0*kno3_two; 
dic_two = dic + dt/2D0*kdic_two; 
po4_two = po4 + dt/2D0*kpo4_two; 
o_two = o + dt/2D0*ko_two; 
!
dn_two = dn + dt/2D0*kdn_two; 
don_two = don + dt/2D0*kdon_two; 
dc_two = dc + dt/2D0*kdc_two; 
doc_two = doc + dt/2D0*kdoc_two; 
dp_two = dp + dt/2D0*kdp_two; 
dop_two = dop + dt/2D0*kdop_two; 
!
xbo_two = xbo + dt/2D0*kxbo_two; 
cbo_two = cbo + dt/2D0*kcbo_two; 
nbo_two = nbo + dt/2D0*knbo_two; 
pbo_two = pbo + dt/2D0*kpbo_two; 
!
xball_two = xball + dt/2D0*kxball_two; 
cball_two = cball + dt/2D0*kcball_two; 
nball_two = nball + dt/2D0*knball_two; 
pball_two = pball + dt/2D0*kpball_two; 
!
xp3_two = xp3 + dt/2D0*kxp3_two; 
cp3_two = cp3 + dt/2D0*kcp3_two; 
np3_two = np3 + dt/2D0*knp3_two; 
pp3_two = pp3 + dt/2D0*kpp3_two; 
!
if (twop.eq.1) then
xp2_two = xp2 + dt/2D0*kxp2_two; 
cp2_two = cp2 + dt/2D0*kcp2_two; 
np2_two = np2 + dt/2D0*knp2_two; 
pp2_two = pp2 + dt/2D0*kpp2_two; 
end if
!
bnh4_two = bnh4 + dt/2D0*kbnh4_two; 
bno2_two = bno2 + dt/2D0*kbno2_two; 
!zoo_two = zoo + dt/2D0*kzoo_two; 
!zoo2_two = zoo2 + dt/2D0*kzoo2_two; 
!zoo3_two = zoo3 + dt/2D0*kzoo3_two; 
        
END SUBROUTINE MYRK

END PROGRAM EZM


